{"version":3,"sources":["components/Column/index.tsx","components/CardNav/index.tsx","pages/Launchpad/styled.ts","pages/styled.ts","pages/Home/HeaderSection/timer.tsx","pages/Launchpad/components/LaunchCard.tsx","pages/Launchpad/components/CardContainer.tsx","pages/Launchpad/index.tsx"],"names":["Column","styled","div","AboutColumn","gap","justify","StyledNav","theme","colors","primary","StyledButtonMenu","ButtonMenu","background","Nav","Button","textSubtle","activeIndex","useContext","ThemeContext","size","variant","fullWidth","id","style","height","isDark","color","text","href","as","Section","CardGroup","Container","Flex","SectionTitle","Heading","StatusColor","Timer","calculateTimeLeft","year","Date","getFullYear","difference","timeLeft","d","Math","floor","h","m","s","useState","setTimeLeft","useEffect","setTimeout","timerComponents","Object","keys","forEach","interval","push","length","LaunchCard","project","category","address","buyingCoin","sellingCoin","title","image","wallpaperBg","desc","totalRaise","ownSale","status","socMeds","totalForSaleTokens","remainingForSale","totalSales","expectedSales","percentage","totalSoldTokens","stats","setStats","account","useWeb3React","contract","useLaunchpadContract","srcs","process","srcsBg","calculateLaunchpadStats","then","r","x","parseFloat","toFixed","replace","padding","src","alt","bold","fill","SvgIcon","width","Icon","MediumIcon","STATE","active","backgroundColor","upcoming","symbol","maxHeight","minHeight","marginBottom","marginTop","completed","primaryStep","justifyContent","fontSize","flexDirection","toString","StyledLink","to","CardContainer","props","ProjectList","pages","map","item","LaunchpadHome","ProjectsLS","useProject","data","ActiveProjects","useMemo","filter","UpcomingProjects","CompletedProjects","Page","CardNav"],"mappings":"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","file":"static/js/14.e791ca95.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst Column = styled.div`\r\n    display: grid;\r\n`\r\n\r\nexport const AboutColumn = styled(Column)`\r\ngrid-template-columns: repeat(3, 1fr);\r\ngrid-template-rows: auto;\r\nwidth: 100%;\r\nmax-width: 1200px;\r\nheight: auto;\r\ntext-align: center;\r\njustify-content: center;\r\ncolumn-gap: 20px;\r\nrow-gap: 20px;\r\n@media (max-width: 600px){\r\n  grid-template-columns: repeat(1, 1fr);\r\n  width: 80%;\r\n}\r\n`\r\n\r\nexport const ColumnCenter = styled(Column)`\r\n  width: 100%;\r\n  align-items: center;\r\n  margin: auto;\r\n`\r\n\r\nexport const AutoColumn = styled.div<{\r\n  gap?: 'sm' | 'md' | 'lg' | string\r\n  justify?: 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between'\r\n}>`\r\n  display: grid;\r\n  grid-auto-rows: auto;\r\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\r\n  justify-items: ${({ justify }) => justify && justify};\r\n\r\n`\r\n\r\nexport const StyledOptions = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  @media (max-width: 450px){\r\n    justify-content: flex-start;\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nexport const StyledAutoColumn = styled(Column)`\r\n  flex-direction: row;\r\n  margin-bottom: 10px;\r\n  @media (max-width: 768px){\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nexport const StyledInputContainer = styled.div`\r\n  width: 100%;\r\n`\r\n\r\n\r\nexport default Column;","import React, {useContext} from 'react'\r\nimport styled, {ThemeContext} from 'styled-components'\r\nimport { Link} from 'react-router-dom'\r\nimport { Button, ButtonMenu, ButtonMenuItem, useModal } from '@sparkpointio/sparkswap-uikit'\r\n\r\nconst StyledNav = styled.div`\r\n  display: flex;\r\n  height: 7vh;\r\n  width: 100%;\r\n  margin-top: 15px;\r\n  border-bottom: 3px solid ${({theme}) => theme.colors.primary};\r\n`\r\n\r\nconst StyledButtonMenu = styled(ButtonMenu)`\r\n  & {\r\n    width: 100%;\r\n    flex: 2;\r\n    background-color: ${({theme}) => theme.colors.background};\r\n  }\r\n`\r\nconst StyledButton = styled(Button)`\r\n  flex: 1;\r\n  background-color: ${({theme}) => theme.colors.background};\r\n  color: ${({theme}) => theme.colors.textSubtle};\r\n  height: 7vh;\r\n`\r\n\r\nconst Nav = ({ activeIndex = 0 }: { activeIndex?: number }) => {\r\n    const theme = useContext(ThemeContext)\r\n\r\n  \r\n    return (\r\n      <StyledNav>\r\n      <StyledButtonMenu size=\"md\" activeIndex={activeIndex}  variant='primary'>\r\n        <ButtonMenuItem fullWidth id=\"swap-nav-link\" style={{height: '7vh', ...theme.isDark && {color: `${theme.isDark && theme.colors.text}`}}} >\r\n          Projects\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem fullWidth id=\"pool-nav-link\" href=\"https://app.srk.finance/#/pool\" as=\"a\" style={{height: '7vh', ...theme.isDark && {color: `${theme.isDark && theme.colors.text}`} }}  >\r\n          Staking\r\n        </ButtonMenuItem>\r\n      </StyledButtonMenu>\r\n    </StyledNav>\r\n  )}\r\n  \r\n  export default Nav","import styled from 'styled-components';\r\nimport { Heading, Flex} from '@sparkpointio/sparkswap-uikit';\r\nimport Column from 'components/Column'\r\n\r\nconst Section = styled.div`\r\n    margin: 35px;\r\n    width: 100%;\r\n`\r\n\r\nexport const CardGroup = styled(Column)`\r\n    grid-template-columns: repeat(3, 1fr);\r\n    text-align: center;\r\n    row-gap: 35px;\r\n    column-gap: 35px;\r\n    margin-top: 20px;\r\n    @media (max-width: 1200px) {\r\n        grid-template-columns: repeat(2, 2fr);\r\n      }\r\n    @media (max-width: 768px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n      }\r\n      \r\n`\r\n\r\nexport const Container = styled(Flex)`\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px;\r\n    max-width: 1200px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`;\r\nexport const SectionTitle = styled(Heading)`\r\n    font-size: 24px;\r\n`;\r\n\r\nexport default Section;","export const StatusColor = {\r\n    live: '#32a31b',\r\n    upcoming: '#7a1ba3',\r\n    completed: '#8e98a5'\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Timer() {\r\n  const calculateTimeLeft = () => {\r\n    const year = new Date().getFullYear();\r\n    const difference = +new Date(`${year}-07-27 17:00:00`) - +new Date();\r\n    // const difference = new Date(\"Jul 27, 2021 17:00:00\").getTime();\r\n    let timeLeft = {};\r\n    \r\n\r\n    if (difference > 0) {\r\n      timeLeft = {\r\n        d: Math.floor(difference / (1000 * 60 * 60 * 24)),\r\n        h: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n        m: Math.floor((difference / 1000 / 60) % 60),\r\n        s: Math.floor((difference / 1000) % 60),\r\n\r\n      };\r\n    }\r\n\r\n    return timeLeft;\r\n  };\r\n\r\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\r\n  const [year] = useState(new Date().getFullYear());\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setTimeLeft(calculateTimeLeft());\r\n    }, 1000);\r\n  });\r\n\r\n  const timerComponents = [];\r\n\r\n  Object.keys(timeLeft).forEach((interval) => {\r\n    if (!timeLeft[interval]) {\r\n      return;\r\n    }\r\n\r\n    timerComponents.push(\r\n        <span style={{color: '#FFFFFF'}}>\r\n        {timeLeft[interval]}{interval}{\" \"}\r\n      </span>\r\n    );\r\n  });\r\n\r\n  // return Ownly is Live after countdown expires\r\n  return (\r\n    <div>\r\n      {timerComponents.length ? timerComponents : <span>Ownly is Live!</span>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Card, Flex, Progress, Text } from '@sparkpointio/sparkswap-uikit';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { Globe, Send, Twitter } from 'react-feather';\r\nimport { ThemeContext } from 'styled-components';\r\nimport UnlockButton from 'components/ConnectWalletButton';\r\nimport SvgIcon from 'components/SvgIcon';\r\nimport { StatusColor } from 'pages/styled';\r\nimport { IProjects, STATE } from 'config/constants/type';\r\nimport { useLaunchpadContract } from 'hooks/useContracts';\r\nimport { calculateLaunchpadStats } from 'utils/contractHelpers';\r\nimport Timer from 'pages/Home/HeaderSection/timer';\r\nimport { ReactComponent as MediumIcon } from './icons/MediumIcon.svg';\r\nimport {\r\n    CardAction,\r\n    DataGroup,\r\n    Details,\r\n    Options,\r\n    ProgressGroup,\r\n    SocmedGroup,\r\n    StyledButton,\r\n    StyledCardBody,\r\n    StyledCardHeader,\r\n    StyledHeading,\r\n    StyledImage,\r\n    TimerButton,\r\n} from './styled';\r\nimport Anchor, { StyledLink } from './StyledLink';\r\n\r\nconst LaunchCard: React.FC<IProjects> = (project) => {\r\n    const { category, address, buyingCoin, sellingCoin, title, image, wallpaperBg, desc, totalRaise, ownSale, status, socMeds } = project;\r\n\r\n    const [stats, setStats] = useState({\r\n        totalForSaleTokens: '00.00',\r\n        remainingForSale: '00.00',\r\n        totalSales: '00.00',\r\n        expectedSales: '00.00',\r\n        percentage: '00.00',\r\n        totalSoldTokens: '00.00'\r\n    });\r\n    const { account } = useWeb3React();\r\n    const contract = useLaunchpadContract(category);\r\n    const theme = useContext(ThemeContext);\r\n    const srcs = `${process.env.PUBLIC_URL}/images/icons/${image}`;\r\n    const srcsBg = `${process.env.PUBLIC_URL}/images/icons/${wallpaperBg}`;\r\n\r\n    useEffect(() => {\r\n        calculateLaunchpadStats(contract, project).then((r) => setStats(r));\r\n    }, [contract, project]);\r\n\r\n    const numberWithCommas = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    }\r\n   \r\n    const percentage = parseFloat(stats.percentage).toFixed(4)\r\n    const totalSales = parseFloat(stats.totalSales).toFixed(4)\r\n    const totalSoldTokens = parseFloat(stats.totalSoldTokens).toFixed(4).replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    const remainingForSale = parseFloat(stats.remainingForSale).toFixed(4).replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    const expectedSales = parseFloat(stats.expectedSales).toFixed(2)\r\n    return (\r\n        <Card style={{ padding: '5px' }}>\r\n            <StyledCardHeader src={srcsBg}>\r\n                <StyledImage src={srcs} alt=\"token-logo\" />\r\n                <StyledHeading bold>{title}</StyledHeading>\r\n            </StyledCardHeader>\r\n            <StyledCardBody>\r\n                <Options>\r\n                    <SocmedGroup>\r\n                        <Anchor href={socMeds?.[0]}>\r\n                            <Globe size=\"24px\" />\r\n                        </Anchor>\r\n                        <Anchor href={socMeds?.[1]}>\r\n                            <Twitter size=\"24px\" fill={theme.colors.text} />\r\n                        </Anchor>\r\n                        <Anchor href={socMeds?.[2]}>\r\n                            <Send size=\"24px\" fill={theme.colors.text} />\r\n                        </Anchor>\r\n                        <Anchor href={socMeds?.[3]}>\r\n                            <SvgIcon width={24} Icon={MediumIcon} />\r\n                        </Anchor>\r\n                    </SocmedGroup>\r\n                    {status === STATE.active ? (\r\n                        <StyledButton style={{ backgroundColor: StatusColor.live }}>LIVE NOW</StyledButton>\r\n                    ) : status === STATE.upcoming ? (\r\n                        <StyledButton style={{ backgroundColor: StatusColor.upcoming }}>UPCOMING</StyledButton>\r\n                    ) : (\r\n                        <StyledButton style={{ backgroundColor: StatusColor.completed }}>COMPLETED</StyledButton>\r\n                    )}\r\n                </Options>\r\n                    {status === STATE.upcoming ? (\r\n                        <ProgressGroup>\r\n                            <TimerButton>${sellingCoin.symbol} Going Live in:&nbsp; <Timer/></TimerButton>\r\n                        </ProgressGroup>    \r\n                    ) : status === STATE.active ? (\r\n                        <ProgressGroup/>\r\n                    ) : (\r\n                        <ProgressGroup/>\r\n                    )}\r\n                <Details>\r\n                    {status === STATE.active ? (\r\n                        <div style={{height: '70px', maxHeight: '80px', minHeight: '70px', marginBottom: '30px', marginTop: '-25px'}}>\r\n                            <Text>{desc}</Text>\r\n                        </div>\r\n                    ) : status === STATE.upcoming ? (\r\n                        <div style={{height: '70px', maxHeight: '80px', minHeight: '70px', marginBottom: '10px', marginTop: '10px'}}>\r\n                            <Text>{desc}</Text>\r\n                        </div>\r\n                        ) : (\r\n                        <div style={{height: '70px', maxHeight: '80px', minHeight: '70px', marginBottom: '30px', marginTop: '-25px'}}>\r\n                            <Text>{desc}</Text>\r\n                        </div>\r\n                    )}\r\n                    <ProgressGroup>\r\n                        {status === STATE.completed ? (\r\n                            <Text as=\"h1\">Sale Completion</Text>\r\n                        ) : status === STATE.upcoming ? (\r\n                            <Text as=\"h1\">Progress</Text>\r\n                        ) : (\r\n                            <Text as=\"h1\">Progress</Text>\r\n                        )}\r\n\r\n                        {status === STATE.upcoming ? (\r\n                            <Progress primaryStep={0} variant=\"flat\" />\r\n                        ) : (\r\n                            <Progress primaryStep={parseFloat(percentage)} variant=\"flat\" />\r\n                        )}\r\n\r\n                        {status === STATE.upcoming ? (\r\n                            <Flex justifyContent=\"space-between\">\r\n                                <Text color=\"textSubtle\" fontSize=\"90%\">{0}%</Text>\r\n                                <Text color=\"textSubtle\" fontSize=\"90%\">\r\n                                    {0} / {totalRaise} {buyingCoin.symbol}\r\n                                </Text>\r\n                            </Flex>\r\n                        ) : (\r\n                            <Flex justifyContent=\"space-between\">\r\n                                <Text color=\"textSubtle\">{percentage}%</Text>\r\n                                <Text color=\"textSubtle\">\r\n                                    {totalSales} / {expectedSales} {buyingCoin.symbol}\r\n                                </Text>\r\n                            </Flex>\r\n                        )}          \r\n\r\n                    </ProgressGroup>\r\n                    <DataGroup flexDirection=\"column\">\r\n\r\n                        {status === STATE.upcoming ? (\r\n                            <Flex justifyContent=\"space-between\">\r\n                                <Text color=\"textSubtle\">Total Raised</Text>\r\n                                <Text>\r\n                                    {0} {buyingCoin.symbol}\r\n                                </Text>\r\n                            </Flex>\r\n                        ) : (\r\n                            <Flex justifyContent=\"space-between\">\r\n                                <Text color=\"textSubtle\">Total Raised</Text>\r\n                                <Text>\r\n                                    {totalSales} {buyingCoin.symbol}\r\n                                </Text>\r\n                            </Flex>\r\n                        )}\r\n\r\n                        <Flex justifyContent=\"space-between\">\r\n                        {status === STATE.upcoming ? (\r\n                            <Text color=\"textSubtle\">Coming Soon For Sale</Text>\r\n                        ) : status === STATE.completed ? (\r\n                            <Text color=\"textSubtle\">${sellingCoin.symbol} Sold</Text>\r\n                        ) : (\r\n                            <Text color=\"textSubtle\">${sellingCoin.symbol} For Sale</Text>\r\n                        )}\r\n\r\n                        {status === STATE.upcoming ? (\r\n                            <Text>{numberWithCommas(ownSale)} {sellingCoin.symbol}</Text>\r\n                        ) : status === STATE.completed ? (\r\n                            <Text>{stats.totalSoldTokens === '0' ? '-' : totalSoldTokens}</Text>\r\n                        ) : (\r\n                            <Text>{stats.remainingForSale === '0' ? '-' : remainingForSale}</Text>\r\n                        )}\r\n                        </Flex>\r\n                        \r\n                        <Flex justifyContent=\"space-between\">\r\n                            <Text color=\"textSubtle\">Buying Coin</Text>\r\n                            <Text>{buyingCoin.symbol}</Text>\r\n                        </Flex>\r\n                    </DataGroup>\r\n                </Details>\r\n            </StyledCardBody>\r\n            {status === 'active' && (\r\n                <CardAction>\r\n                    {!account ? (\r\n                        <UnlockButton fullWidth />\r\n                    ) : (\r\n                        <StyledLink to={`/projects/${address}`}>\r\n                            <h1 style={{ color: 'white' }}>Participate</h1>\r\n                        </StyledLink>\r\n                    )}\r\n                </CardAction>\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default LaunchCard;\r\n","import React from 'react';\r\nimport { CardGroup } from '../styled';\r\nimport Card from './LaunchCard';\r\nimport { IProjects } from '../../../config/constants/type';\r\nimport {useLaunchpadContract} from \"../../../hooks/useContracts\";\r\n\r\ninterface Props {\r\n    ProjectList?: Array<IProjects>\r\n}\r\n\r\nconst CardContainer: React.FC<Props> = (props) => {\r\n    const { ProjectList } = props;\r\n    const pages = ProjectList?.map((item) => {\r\n        return (\r\n            <Card\r\n            key={item.address}\r\n                {... item}\r\n            />\r\n        );\r\n    })\r\n    return (\r\n        <CardGroup>\r\n            {pages}\r\n        </CardGroup>\r\n    );\r\n};\r\n\r\nexport default CardContainer;\r\n","import React, { useMemo } from 'react';\r\nimport { useProject } from 'state/hooks';\r\nimport Page from 'components/layout/Page';\r\nimport CardNav from 'components/CardNav';\r\nimport { STATE } from 'config/constants/type';\r\nimport Section, { Container, SectionTitle } from './styled';\r\nimport CardContainer from './components/CardContainer';\r\n\r\n\r\nconst LaunchpadHome: React.FC = () => {\r\n    const { data: ProjectsLS } = useProject();\r\n\r\n    const ActiveProjects = useMemo(() => ProjectsLS.filter((project) => project.status === STATE.active), [ProjectsLS]);\r\n    const UpcomingProjects = useMemo(() => ProjectsLS.filter((project) => project.status === STATE.upcoming), [ProjectsLS]);\r\n    const CompletedProjects = useMemo(\r\n        () => ProjectsLS.filter((project) => project.status === STATE.completed),\r\n        [ProjectsLS],\r\n    );\r\n\r\n    return (\r\n        <Page>\r\n            <Container>\r\n                <CardNav />\r\n                {ActiveProjects.length !==0 && (<Section>\r\n                    <SectionTitle>Ongoing Launches</SectionTitle>\r\n                    <CardContainer ProjectList={ActiveProjects} />\r\n                </Section>\r\n                )}\r\n                {UpcomingProjects.length !== 0 && (\r\n                    <Section>\r\n                        <SectionTitle>Upcoming Launches</SectionTitle>\r\n                        <CardContainer ProjectList={UpcomingProjects} />\r\n                    </Section>\r\n                )}\r\n                {CompletedProjects.length !== 0 && (\r\n                    <Section>\r\n                        <SectionTitle>Completed Launches</SectionTitle>\r\n                        <CardContainer ProjectList={CompletedProjects} />\r\n                    </Section>\r\n                )}\r\n            </Container>\r\n        </Page>\r\n    );\r\n};\r\n\r\nexport default LaunchpadHome;\r\n"],"sourceRoot":""}