{"version":3,"sources":["components/Column/index.tsx","components/CardNav/index.tsx","pages/Launchpad/styled.ts","pages/styled.ts","pages/Home/HeaderSection/timer.tsx","pages/Launchpad/components/LaunchCard.tsx","pages/Launchpad/components/CardContainer.tsx","pages/Launchpad/index.tsx"],"names":["Column","styled","div","AboutColumn","gap","justify","StyledNav","theme","colors","primary","StyledButtonMenu","ButtonMenu","background","Nav","Button","textSubtle","activeIndex","useContext","ThemeContext","size","variant","fullWidth","id","style","height","isDark","color","text","href","as","Section","CardGroup","Container","Flex","SectionTitle","Heading","StatusColor","Timer","calculateTimeLeft","year","Date","getFullYear","difference","timeLeft","d","Math","floor","h","m","s","useState","setTimeLeft","useEffect","setTimeout","timerComponents","Object","keys","forEach","interval","push","length","LaunchCard","project","category","address","buyingCoin","sellingCoin","title","image","wallpaperBg","desc","status","socMeds","totalForSaleTokens","remainingForSale","totalSales","expectedSales","percentage","stats","setStats","account","useWeb3React","contract","useLaunchpadContract","srcs","process","srcsBg","calculateLaunchpadStats","then","r","padding","src","alt","bold","fill","SvgIcon","width","Icon","MediumIcon","STATE","active","backgroundColor","upcoming","display","symbol","maxHeight","minHeight","marginBottom","marginTop","completed","primaryStep","parseInt","justifyContent","flexDirection","StyledLink","to","CardContainer","props","ProjectList","pages","map","item","LaunchpadHome","ProjectsLS","useProject","data","ActiveProjects","useMemo","filter","UpcomingProjects","CompletedProjects","Page","CardNav"],"mappings":"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","file":"static/js/14.2d699f90.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Column = styled.div`\n    display: grid;\n`\n\nexport const AboutColumn = styled(Column)`\ngrid-template-columns: repeat(3, 1fr);\ngrid-template-rows: auto;\nwidth: 100%;\nmax-width: 1200px;\nheight: auto;\ntext-align: center;\njustify-content: center;\ncolumn-gap: 20px;\nrow-gap: 20px;\n@media (max-width: 600px){\n  grid-template-columns: repeat(1, 1fr);\n  width: 80%;\n}\n`\n\nexport const ColumnCenter = styled(Column)`\n  width: 100%;\n  align-items: center;\n  margin: auto;\n`\n\nexport const AutoColumn = styled.div<{\n  gap?: 'sm' | 'md' | 'lg' | string\n  justify?: 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between'\n}>`\n  display: grid;\n  grid-auto-rows: auto;\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\n  justify-items: ${({ justify }) => justify && justify};\n\n`\n\nexport const StyledOptions = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  @media (max-width: 450px){\n    justify-content: flex-start;\n    flex-direction: column;\n  }\n`\n\nexport const StyledAutoColumn = styled(Column)`\n  flex-direction: row;\n  margin-bottom: 10px;\n  @media (max-width: 768px){\n    flex-direction: column;\n  }\n`\n\nexport const StyledInputContainer = styled.div`\n  width: 100%;\n`\n\n\nexport default Column;","import React, {useContext} from 'react'\nimport styled, {ThemeContext} from 'styled-components'\nimport { Link} from 'react-router-dom'\nimport { Button, ButtonMenu, ButtonMenuItem, useModal } from '@sparkpointio/sparkswap-uikit'\n\nconst StyledNav = styled.div`\n  display: flex;\n  height: 7vh;\n  width: 100%;\n  margin-top: 15px;\n  border-bottom: 3px solid ${({theme}) => theme.colors.primary};\n`\n\nconst StyledButtonMenu = styled(ButtonMenu)`\n  & {\n    width: 100%;\n    flex: 2;\n    background-color: ${({theme}) => theme.colors.background};\n  }\n`\nconst StyledButton = styled(Button)`\n  flex: 1;\n  background-color: ${({theme}) => theme.colors.background};\n  color: ${({theme}) => theme.colors.textSubtle};\n  height: 7vh;\n`\n\nconst Nav = ({ activeIndex = 0 }: { activeIndex?: number }) => {\n    const theme = useContext(ThemeContext)\n\n  \n    return (\n      <StyledNav>\n      <StyledButtonMenu size=\"md\" activeIndex={activeIndex}  variant='primary'>\n        <ButtonMenuItem fullWidth id=\"swap-nav-link\" style={{height: '7vh', ...theme.isDark && {color: `${theme.isDark && theme.colors.text}`}}} >\n          Projects\n        </ButtonMenuItem>\n        <ButtonMenuItem fullWidth id=\"pool-nav-link\" href=\"https://app.srk.finance/#/pool\" as=\"a\" style={{height: '7vh', ...theme.isDark && {color: `${theme.isDark && theme.colors.text}`} }}  >\n          Staking\n        </ButtonMenuItem>\n      </StyledButtonMenu>\n    </StyledNav>\n  )}\n  \n  export default Nav","import styled from 'styled-components';\nimport { Heading, Flex} from '@sparkpointio/sparkswap-uikit';\nimport Column from 'components/Column'\n\nconst Section = styled.div`\n    margin: 35px;\n    width: 100%;\n`\n\nexport const CardGroup = styled(Column)`\n    grid-template-columns: repeat(3, 1fr);\n    text-align: center;\n    row-gap: 35px;\n    column-gap: 35px;\n    margin-top: 20px;\n    @media (max-width: 1000px) {\n        grid-template-columns: repeat(2, 2fr);\n      }\n    @media (max-width: 500px) {\n        grid-template-columns: repeat(1, 1fr);\n      }\n`\n\nexport const Container = styled(Flex)`\n    flex-direction: column;\n    align-items: center;\n    padding: 20px;\n    max-width: 1200px;\n    width: 100%;\n    margin: 0 auto;\n`;\nexport const SectionTitle = styled(Heading)`\n    font-size: 24px;\n`;\n\nexport default Section;","export const StatusColor = {\n    live: '#32a31b',\n    upcoming: '#7a1ba3',\n    completed: '#8e98a5'\n}","import React, { useEffect, useState } from \"react\";\n\nfunction Timer() {\n  const calculateTimeLeft = () => {\n    const year = new Date().getFullYear();\n    const difference = +new Date(`${year}-07-27 17:00:00`) - +new Date();\n    // const difference = new Date(\"Jul 27, 2021 17:00:00\").getTime();\n    let timeLeft = {};\n    \n\n    if (difference > 0) {\n      timeLeft = {\n        d: Math.floor(difference / (1000 * 60 * 60 * 24)),\n        h: Math.floor((difference / (1000 * 60 * 60)) % 24),\n        m: Math.floor((difference / 1000 / 60) % 60),\n        s: Math.floor((difference / 1000) % 60),\n\n      };\n    }\n\n    return timeLeft;\n  };\n\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n  const [year] = useState(new Date().getFullYear());\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n  });\n\n  const timerComponents = [];\n\n  Object.keys(timeLeft).forEach((interval) => {\n    if (!timeLeft[interval]) {\n      return;\n    }\n\n    timerComponents.push(\n        <span style={{color: '#FFFFFF'}}>\n        {timeLeft[interval]}{interval}{\" \"}\n      </span>\n    );\n  });\n\n  // return Ownly is Live after countdown expires\n  return (\n    <div>\n      {timerComponents.length ? timerComponents : <span>Ownly is Live!</span>}\n    </div>\n  );\n}\n\nexport default Timer;","import React, { useContext, useEffect, useState } from 'react';\nimport { Card, Flex, Progress, Text } from '@sparkpointio/sparkswap-uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { Globe, Send, Twitter } from 'react-feather';\nimport { ThemeContext } from 'styled-components';\nimport UnlockButton from 'components/ConnectWalletButton';\nimport SvgIcon from 'components/SvgIcon';\nimport { StatusColor } from 'pages/styled';\nimport { IProjects, STATE } from 'config/constants/type';\nimport { useLaunchpadContract } from 'hooks/useContracts';\nimport { calculateLaunchpadStats } from 'utils/contractHelpers';\nimport Timer from 'pages/Home/HeaderSection/timer';\nimport { ReactComponent as MediumIcon } from './icons/MediumIcon.svg';\nimport {\n    CardAction,\n    DataGroup,\n    Details,\n    Options,\n    ProgressGroup,\n    SocmedGroup,\n    StyledButton,\n    StyledCardBody,\n    StyledCardHeader,\n    StyledHeading,\n    StyledImage,\n} from './styled';\nimport Anchor, { StyledLink } from './StyledLink';\n\nconst LaunchCard: React.FC<IProjects> = (project) => {\n    const { category, address, buyingCoin, sellingCoin, title, image, wallpaperBg, desc, status, socMeds } = project;\n\n    const [stats, setStats] = useState({\n        totalForSaleTokens: '-',\n        remainingForSale: '-',\n        totalSales: '-',\n        expectedSales: '-',\n        percentage: '-',\n    });\n    const { account } = useWeb3React();\n    const contract = useLaunchpadContract(category);\n    const theme = useContext(ThemeContext);\n    const srcs = `${process.env.PUBLIC_URL}/images/icons/${image}`;\n    const srcsBg = `${process.env.PUBLIC_URL}/images/icons/${wallpaperBg}`;\n\n    useEffect(() => {\n        calculateLaunchpadStats(contract, project).then((r) => setStats(r));\n    }, [contract, project]);\n\n    return (\n        <Card style={{ padding: '5px' }}>\n            <StyledCardHeader src={srcsBg}>\n                <StyledImage src={srcs} alt=\"token-logo\" />\n                <StyledHeading bold>{title}</StyledHeading>\n            </StyledCardHeader>\n            <StyledCardBody>\n                <Options>\n                    <SocmedGroup>\n                        <Anchor href={socMeds?.[0]}>\n                            <Globe size=\"24px\" />\n                        </Anchor>\n                        <Anchor href={socMeds?.[1]}>\n                            <Twitter size=\"24px\" fill={theme.colors.text} />\n                        </Anchor>\n                        <Anchor href={socMeds?.[2]}>\n                            <Send size=\"24px\" fill={theme.colors.text} />\n                        </Anchor>\n                        <Anchor href={socMeds?.[3]}>\n                            <SvgIcon width={24} Icon={MediumIcon} />\n                        </Anchor>\n                    </SocmedGroup>\n                    {status === STATE.active ? (\n                        <StyledButton style={{ backgroundColor: StatusColor.live }}>LIVE NOW</StyledButton>\n                    ) : status === STATE.upcoming ? (\n                        <StyledButton style={{ backgroundColor: StatusColor.upcoming }}>UPCOMING</StyledButton>\n                    ) : (\n                        <StyledButton style={{ backgroundColor: StatusColor.completed }}>COMPLETED</StyledButton>\n                    )}\n                </Options>\n                <StyledButton style={{width: '51vh', height: '7vh', backgroundColor: 'green', display: 'inline-flex'}}>${sellingCoin.symbol} Going Live in:&nbsp; <Timer/></StyledButton>\n                <Details>\n                    <div style={{height: '70px', maxHeight: '80px', minHeight: '70px', marginBottom: '10px', marginTop: '10px'}}>\n                        <Text>{desc}</Text>\n                    </div>\n                    <ProgressGroup>\n                        {status === STATE.completed ? (\n                            <Text as=\"h1\">Sale Completion</Text>\n                        ) : status === STATE.upcoming ? (\n                            <Text as=\"h1\">Progress</Text>\n                        ) : (\n                            <Text as=\"h1\">Progress</Text>\n                        )}\n\n                        <Progress primaryStep={parseInt(stats.percentage)} variant=\"flat\" />\n                        <Flex justifyContent=\"space-between\">\n                            <Text color=\"textSubtle\">{stats.percentage}%</Text>\n                            <Text color=\"textSubtle\">\n                                {stats.totalSales} / {stats.expectedSales} {buyingCoin.symbol}\n                            </Text>\n                        </Flex>\n                    </ProgressGroup>\n                    <DataGroup flexDirection=\"column\">\n                        <Flex justifyContent=\"space-between\">\n                            <Text color=\"textSubtle\">Total Raised</Text>\n                            <Text>\n                                {stats.totalSales} {buyingCoin.symbol}\n                            </Text>\n                        </Flex>\n                        <Flex justifyContent=\"space-between\">\n                            {status === STATE.upcoming ? (\n                                <Text color=\"textSubtle\">Coming Soon For Sale </Text>\n                            ) : (\n                                <Text color=\"textSubtle\">${sellingCoin.symbol} For Sale</Text>\n                            )}\n                            <Text>{stats.remainingForSale === '0' ? '-' : stats.remainingForSale}</Text>\n                        </Flex>\n                        <Flex justifyContent=\"space-between\">\n                            <Text color=\"textSubtle\">Buying Coin</Text>\n                            <Text>{buyingCoin.symbol}</Text>\n                        </Flex>\n                    </DataGroup>\n                </Details>\n            </StyledCardBody>\n            {status === 'active' && (\n                <CardAction>\n                    {!account ? (\n                        <UnlockButton fullWidth />\n                    ) : (\n                        <StyledLink to={`/projects/${address}`}>\n                            <h1 style={{ color: 'white' }}>Participate</h1>\n                        </StyledLink>\n                    )}\n                </CardAction>\n            )}\n        </Card>\n    );\n};\n\nexport default LaunchCard;\n","import React from 'react';\nimport { CardGroup } from '../styled';\nimport Card from './LaunchCard';\nimport { IProjects } from '../../../config/constants/type';\nimport {useLaunchpadContract} from \"../../../hooks/useContracts\";\n\ninterface Props {\n    ProjectList?: Array<IProjects>\n}\n\nconst CardContainer: React.FC<Props> = (props) => {\n    const { ProjectList } = props;\n    const pages = ProjectList?.map((item) => {\n        return (\n            <Card\n            key={item.address}\n                {... item}\n            />\n        );\n    })\n    return (\n        <CardGroup>\n            {pages}\n        </CardGroup>\n    );\n};\n\nexport default CardContainer;\n","import React, { useMemo } from 'react';\nimport { useProject } from 'state/hooks';\nimport Page from 'components/layout/Page';\nimport CardNav from 'components/CardNav';\nimport { STATE } from 'config/constants/type';\nimport Section, { Container, SectionTitle } from './styled';\nimport CardContainer from './components/CardContainer';\n\n\nconst LaunchpadHome: React.FC = () => {\n    const { data: ProjectsLS } = useProject();\n\n    const ActiveProjects = useMemo(() => ProjectsLS.filter((project) => project.status === STATE.active), [ProjectsLS]);\n    const UpcomingProjects = useMemo(() => ProjectsLS.filter((project) => project.status === STATE.upcoming), [ProjectsLS]);\n    const CompletedProjects = useMemo(\n        () => ProjectsLS.filter((project) => project.status === STATE.completed),\n        [ProjectsLS],\n    );\n\n    return (\n        <Page>\n            <Container>\n                <CardNav />\n                <Section>\n                    <SectionTitle>Ongoing Launches</SectionTitle>\n                    <CardContainer ProjectList={ActiveProjects} />\n                </Section>\n                {UpcomingProjects.length !== 0 && (\n                    <Section>\n                        <SectionTitle>Upcoming Launches</SectionTitle>\n                        <CardContainer ProjectList={UpcomingProjects} />\n                    </Section>\n                )}\n                {CompletedProjects.length !== 0 && (\n                    <Section>\n                        <SectionTitle>Completed Launches</SectionTitle>\n                        <CardContainer ProjectList={CompletedProjects} />\n                    </Section>\n                )}\n            </Container>\n        </Page>\n    );\n};\n\nexport default LaunchpadHome;\n"],"sourceRoot":""}