{"version":3,"sources":["components/Column/index.tsx","components/CardNav/index.tsx","pages/Launchpad/styled.ts","pages/styled.ts","pages/Launchpad/components/LaunchCard.tsx","pages/Launchpad/components/CardContainer.tsx","pages/Launchpad/index.tsx"],"names":["Column","styled","div","AboutColumn","gap","justify","StyledNav","theme","colors","primary","StyledButtonMenu","ButtonMenu","background","Nav","Button","textSubtle","activeIndex","useContext","ThemeContext","size","variant","fullWidth","id","style","height","isDark","color","text","href","as","Section","CardGroup","Container","Flex","SectionTitle","Heading","StatusColor","LaunchCard","project","category","address","buyingCoin","title","image","wallpaperBg","desc","ownSale","status","socMeds","useState","totalForSaleTokens","remainingForSale","totalSales","expectedSales","percentage","stats","setStats","account","useWeb3React","contract","useLaunchpadContract","srcs","process","srcsBg","useEffect","calculateLaunchpadStats","then","r","padding","src","alt","bold","fill","SvgIcon","width","Icon","MediumIcon","backgroundColor","maxHeight","minHeight","marginBottom","primaryStep","parseInt","justifyContent","symbol","flexDirection","StyledLink","to","CardContainer","props","ProjectList","pages","map","item","LaunchpadHome","ProjectsLS","useProject","data","ActiveProjects","useMemo","filter","UpcomingProjects","CompletedProjects","Page","CardNav"],"mappings":"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","file":"static/js/14.1db3ce4c.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst Column = styled.div`\r\n    display: grid;\r\n`\r\n\r\nexport const AboutColumn = styled(Column)`\r\ngrid-template-columns: repeat(3, 1fr);\r\ngrid-template-rows: auto;\r\nwidth: 100%;\r\nmax-width: 1200px;\r\nheight: auto;\r\ntext-align: center;\r\njustify-content: center;\r\ncolumn-gap: 20px;\r\nrow-gap: 20px;\r\n@media (max-width: 600px){\r\n  grid-template-columns: repeat(1, 1fr);\r\n  width: 80%;\r\n}\r\n`\r\n\r\nexport const ColumnCenter = styled(Column)`\r\n  width: 100%;\r\n  align-items: center;\r\n  margin: auto;\r\n`\r\n\r\nexport const AutoColumn = styled.div<{\r\n  gap?: 'sm' | 'md' | 'lg' | string\r\n  justify?: 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between'\r\n}>`\r\n  display: grid;\r\n  grid-auto-rows: auto;\r\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\r\n  justify-items: ${({ justify }) => justify && justify};\r\n\r\n`\r\n\r\nexport const StyledOptions = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  @media (max-width: 450px){\r\n    justify-content: flex-start;\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nexport const StyledAutoColumn = styled(Column)`\r\n  flex-direction: row;\r\n  margin-bottom: 10px;\r\n  @media (max-width: 768px){\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nexport const StyledInputContainer = styled.div`\r\n  width: 100%;\r\n`\r\n\r\n\r\nexport default Column;","import React, {useContext} from 'react'\r\nimport styled, {ThemeContext} from 'styled-components'\r\nimport { Link} from 'react-router-dom'\r\nimport { Button, ButtonMenu, ButtonMenuItem, useModal } from '@sparkpointio/sparkswap-uikit'\r\n\r\nconst StyledNav = styled.div`\r\n  display: flex;\r\n  height: 7vh;\r\n  width: 100%;\r\n  margin-top: 15px;\r\n  border-bottom: 3px solid ${({theme}) => theme.colors.primary};\r\n`\r\n\r\nconst StyledButtonMenu = styled(ButtonMenu)`\r\n  & {\r\n    width: 100%;\r\n    flex: 2;\r\n    background-color: ${({theme}) => theme.colors.background};\r\n  }\r\n`\r\nconst StyledButton = styled(Button)`\r\n  flex: 1;\r\n  background-color: ${({theme}) => theme.colors.background};\r\n  color: ${({theme}) => theme.colors.textSubtle};\r\n  height: 7vh;\r\n`\r\n\r\nconst Nav = ({ activeIndex = 0 }: { activeIndex?: number }) => {\r\n    const theme = useContext(ThemeContext)\r\n\r\n  \r\n    return (\r\n      <StyledNav>\r\n      <StyledButtonMenu size=\"md\" activeIndex={activeIndex}  variant='primary'>\r\n        <ButtonMenuItem fullWidth id=\"swap-nav-link\" style={{height: '7vh', ...theme.isDark && {color: `${theme.isDark && theme.colors.text}`}}} >\r\n          Projects\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem fullWidth id=\"pool-nav-link\" href=\"https://app.srk.finance/#/pool\" as=\"a\" style={{height: '7vh', ...theme.isDark && {color: `${theme.isDark && theme.colors.text}`} }}  >\r\n          Staking\r\n        </ButtonMenuItem>\r\n      </StyledButtonMenu>\r\n    </StyledNav>\r\n  )}\r\n  \r\n  export default Nav","import styled from 'styled-components';\r\nimport { Heading, Flex} from '@sparkpointio/sparkswap-uikit';\r\nimport Column from 'components/Column'\r\n\r\nconst Section = styled.div`\r\n    margin: 35px;\r\n    width: 100%;\r\n`\r\n\r\nexport const CardGroup = styled(Column)`\r\n    grid-template-columns: repeat(3, 1fr);\r\n    text-align: center;\r\n    row-gap: 35px;\r\n    column-gap: 35px;\r\n    margin-top: 20px;\r\n    @media (max-width: 1000px) {\r\n        grid-template-columns: repeat(2, 2fr);\r\n      }\r\n    @media (max-width: 500px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n      }\r\n`\r\n\r\nexport const Container = styled(Flex)`\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px;\r\n    max-width: 1200px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`;\r\nexport const SectionTitle = styled(Heading)`\r\n    font-size: 24px;\r\n`;\r\n\r\nexport default Section;","export const StatusColor = {\r\n    live: '#32a31b',\r\n    upcoming: '#7a1ba3',\r\n    completed: '#8e98a5'\r\n}","import React, {useContext, useEffect, useState} from 'react';\r\nimport {Card, Flex, Progress, Text} from '@sparkpointio/sparkswap-uikit';\r\nimport {useWeb3React} from '@web3-react/core';\r\nimport {Globe, Send, Twitter} from 'react-feather';\r\nimport {ThemeContext} from 'styled-components';\r\nimport UnlockButton from 'components/ConnectWalletButton';\r\nimport SvgIcon from 'components/SvgIcon';\r\nimport {StatusColor} from 'pages/styled';\r\nimport {IProjects} from '../../../config/constants/type';\r\nimport {ReactComponent as MediumIcon} from './icons/MediumIcon.svg';\r\nimport {\r\n    CardAction,\r\n    DataGroup,\r\n    Details,\r\n    Options,\r\n    ProgressGroup,\r\n    SocmedGroup,\r\n    StyledButton,\r\n    StyledCardBody,\r\n    StyledCardHeader,\r\n    StyledHeading,\r\n    StyledImage\r\n} from './styled';\r\nimport Anchor, {StyledLink} from './StyledLink';\r\nimport {useLaunchpadContract} from \"../../../hooks/useContracts\";\r\nimport {calculateLaunchpadStats} from \"../../../utils/contractHelpers\";\r\n\r\n\r\nconst LaunchCard: React.FC<IProjects> = (project) => {\r\n    const {\r\n        category,\r\n        address,\r\n        buyingCoin,\r\n        title,\r\n        image,\r\n        wallpaperBg,\r\n        desc,\r\n        ownSale,\r\n        status,\r\n        socMeds\r\n    } = project;\r\n\r\n    const [stats, setStats] = useState({\r\n        totalForSaleTokens: '-',\r\n        remainingForSale: '-',\r\n        totalSales: '-',\r\n        expectedSales: '-',\r\n        percentage: '-'\r\n    })\r\n    const {account} = useWeb3React();\r\n    const contract = useLaunchpadContract(category)\r\n\r\n    const theme = useContext(ThemeContext);\r\n    const srcs = `${process.env.PUBLIC_URL}/images/icons/${image}`;\r\n    const srcsBg = `${process.env.PUBLIC_URL}/images/icons/${wallpaperBg}`;\r\n\r\n    useEffect(() => {\r\n        calculateLaunchpadStats(contract, project).then(r => setStats(r));\r\n    }, [contract, project])\r\n\r\n    return (\r\n        <Card style={{padding: '5px'}}>\r\n            <StyledCardHeader src={srcsBg}>\r\n                <StyledImage src={srcs} alt=\"token-logo\"/>\r\n                <StyledHeading bold>\r\n                    {title}\r\n                </StyledHeading>\r\n            </StyledCardHeader>\r\n            <StyledCardBody>\r\n                <Options>\r\n                    <SocmedGroup>\r\n                        <Anchor href={socMeds?.[0]}>\r\n                            <Globe size=\"24px\"/>\r\n                        </Anchor>\r\n                        <Anchor href={socMeds?.[1]}>\r\n                            <Twitter size=\"24px\" fill={theme.colors.text}/>\r\n                        </Anchor>\r\n                        <Anchor href={socMeds?.[2]}>\r\n                            <Send size=\"24px\" fill={theme.colors.text}/>\r\n                        </Anchor>\r\n                        <Anchor href={socMeds?.[3]}>\r\n                            <SvgIcon width={24} Icon={MediumIcon}/>\r\n                        </Anchor>\r\n                    </SocmedGroup>\r\n                    {status === 'active' ? (\r\n                        <StyledButton style={{backgroundColor: StatusColor.live}}>LIVE NOW</StyledButton>\r\n                    ) : status === 'upcoming' ? (\r\n                        <StyledButton style={{backgroundColor: StatusColor.upcoming}}>UPCOMING</StyledButton>\r\n                    ) : (\r\n                        <StyledButton style={{backgroundColor: StatusColor.completed}}>COMPLETED</StyledButton>\r\n                    )}\r\n                </Options>\r\n                <Details>\r\n                    <div style={{height: '70px', maxHeight: '80px', minHeight: '70px', marginBottom: '10px'}}>\r\n                        <Text>{desc}</Text>\r\n                    </div>\r\n                    <ProgressGroup>\r\n                        {status === 'completed' ? (\r\n                            <Text as=\"h1\">Sale Completion</Text>\r\n                        ) : status === 'upcoming' ? (\r\n                            <Text as=\"h1\">Progress</Text>\r\n                        ) : (\r\n                            <Text as=\"h1\">Progress</Text>\r\n                        )}\r\n\r\n                        <Progress primaryStep={parseInt(stats.percentage)} variant=\"flat\"/>\r\n                        <Flex justifyContent=\"space-between\">\r\n                            <Text color=\"textSubtle\">{stats.percentage}%</Text>\r\n                            <Text color=\"textSubtle\">\r\n                                {stats.totalSales} / {stats.expectedSales} {buyingCoin.symbol}\r\n                            </Text>\r\n                        </Flex>\r\n                    </ProgressGroup>\r\n                    <DataGroup flexDirection=\"column\">\r\n                        <Flex justifyContent=\"space-between\">\r\n                            <Text color=\"textSubtle\">Total Raised</Text>\r\n                            <Text>\r\n                                {stats.totalSales} {buyingCoin.symbol}\r\n                            </Text>\r\n                        </Flex>\r\n                        <Flex justifyContent=\"space-between\">\r\n                            {status === 'upcoming' ? (\r\n                                <Text color=\"textSubtle\">Coming Soon For Sale </Text>\r\n                            ) : (\r\n                                <Text color=\"textSubtle\">OWN For Sale</Text>\r\n                            )}\r\n                            <Text>{ownSale === 0 ? '-' : stats.remainingForSale}</Text>\r\n                        </Flex>\r\n                        <Flex justifyContent=\"space-between\">\r\n                            <Text color=\"textSubtle\">Buying Coin</Text>\r\n                            <Text>{buyingCoin.symbol}</Text>\r\n                        </Flex>\r\n                    </DataGroup>\r\n                </Details>\r\n            </StyledCardBody>\r\n            {status === 'active' && (\r\n                <CardAction>\r\n                    {!account ? (\r\n                        <UnlockButton fullWidth/>\r\n                    ) : (\r\n                        <StyledLink to={`/projects/${address}`}>\r\n                            <h1 style={{color: 'white'}}>Participate</h1>\r\n                        </StyledLink>\r\n                    )}\r\n                </CardAction>\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default LaunchCard;\r\n","import React from 'react';\r\nimport { CardGroup } from '../styled';\r\nimport Card from './LaunchCard';\r\nimport { IProjects } from '../../../config/constants/type';\r\nimport {useLaunchpadContract} from \"../../../hooks/useContracts\";\r\n\r\ninterface Props {\r\n    ProjectList?: Array<IProjects>\r\n}\r\n\r\nconst CardContainer: React.FC<Props> = (props) => {\r\n    const { ProjectList } = props;\r\n    const pages = ProjectList?.map((item) => {\r\n        return (\r\n            <Card\r\n                {... item}\r\n            />\r\n        );\r\n    })\r\n    return (\r\n        <CardGroup>\r\n            {pages}\r\n        </CardGroup>\r\n    );\r\n};\r\n\r\nexport default CardContainer;\r\n","import React, { useMemo } from 'react';\r\nimport { useProject } from 'state/hooks';\r\nimport Page from 'components/layout/Page';\r\nimport CardNav from 'components/CardNav';\r\nimport Section, { Container, SectionTitle} from './styled';\r\nimport CardContainer from './components/CardContainer';\r\n\r\n\r\nconst LaunchpadHome: React.FC = () => {\r\n    const { data: ProjectsLS } = useProject();\r\n    \r\n    const ActiveProjects = useMemo(() => ProjectsLS.filter(project => project.status === \"active\"), [ProjectsLS])\r\n    const UpcomingProjects = useMemo(() => ProjectsLS.filter(project => project.status === \"upcoming\"), [ProjectsLS])\r\n    const CompletedProjects = useMemo(() => ProjectsLS.filter(project => project.status === \"completed\"), [ProjectsLS])\r\n\r\n  \r\n    return (\r\n        <Page>\r\n            <Container>\r\n                <CardNav />\r\n                <Section>\r\n                    <SectionTitle>Ongoing Launches</SectionTitle>\r\n                    <CardContainer ProjectList={ActiveProjects} />\r\n                </Section>\r\n                <Section>\r\n                    <SectionTitle>Upcoming Launches</SectionTitle>\r\n                    <CardContainer ProjectList={UpcomingProjects} />\r\n                </Section>\r\n                <Section>\r\n                    <SectionTitle>Completed Launches</SectionTitle>\r\n                    <CardContainer ProjectList={CompletedProjects} />\r\n                </Section>\r\n            </Container>\r\n        </Page>\r\n    );\r\n};\r\n\r\nexport default LaunchpadHome;\r\n"],"sourceRoot":""}