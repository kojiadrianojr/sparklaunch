{"version":3,"sources":["components/Column/index.tsx","components/CardNav/index.tsx","pages/Launchpad/styled.ts","components/Modals/ClaimModal.tsx","pages/styled.ts","pages/Home/HeaderSection/timer.tsx","pages/Launchpad/components/LaunchCard.tsx","pages/Launchpad/components/CardContainer.tsx","pages/Launchpad/index.tsx"],"names":["Column","styled","div","AboutColumn","TwoColumn","TwoColumnHeader","gap","justify","StyledNav","theme","colors","primary","StyledButtonMenu","ButtonMenu","background","Nav","Button","textSubtle","activeIndex","useContext","ThemeContext","size","variant","fullWidth","id","style","height","isDark","color","text","href","as","Section","CardGroup","Container","Flex","SectionTitle","Heading","TokenIcon","StyledImage","ClaimModal","title","onDismiss","rewards","contract","useState","confirmed","setConfirm","hash","setHash","handleConfirm","a","redeemTokens","tx","code","message","data","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","TokenReward","fontWeight","amount","src","process","token","flexDirection","alignItems","marginTop","maxWidth","fontSize","bold","margin","textAlign","target","rel","width","padding","onClick","StatusColor","Timer","calculateTimeLeft","year","Date","getFullYear","difference","timeLeft","d","Math","floor","h","m","s","setTimeLeft","useEffect","setTimeout","timerComponents","Object","keys","forEach","interval","push","length","LaunchCard","project","category","address","buyingCoin","sellingCoin","image","wallpaperBg","desc","status","totalRaise","ownSale","socMeds","totalForSaleTokens","remainingForSale","totalSales","expectedSales","percentage","totalSoldTokens","stats","setStats","redeemable","setRedeemable","redeemable1","setRedeemable1","account","useWeb3React","useLaunchpadContract","contract1","srcs","srcsBg","calculateLaunchpadStats","then","r","r1","r2","accountDetails","setAccountDetails","getRedeem","parseInt","TokenAmount","OWN","toExact","console","log","useModal","onClaimR1Modal","onClaimR2Modal","parseFloat","toFixed","replace","alt","fill","SvgIcon","Icon","MediumIcon","STATE","active","backgroundColor","upcoming","maxHeight","minHeight","marginBottom","completed","primaryStep","justifyContent","symbol","StyledLink","to","disabled","CardContainer","props","ProjectList","pages","map","item","LaunchpadHome","ProjectsLS","useProject","ActiveProjects","useMemo","filter","UpcomingProjects","CompletedProjects","Page","CardNav"],"mappings":"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","file":"static/js/15.1f493176.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst Column = styled.div`\r\n    display: grid;\r\n`\r\n\r\nexport const AboutColumn = styled(Column)`\r\ngrid-template-columns: repeat(3, 1fr);\r\ngrid-template-rows: auto;\r\nwidth: 100%;\r\nmax-width: 1200px;\r\nheight: auto;\r\ntext-align: center;\r\njustify-content: center;\r\ncolumn-gap: 20px;\r\nrow-gap: 20px;\r\n@media (max-width: 600px){\r\n  grid-template-columns: repeat(1, 1fr);\r\n  width: 80%;\r\n}\r\n`\r\nexport const TwoColumn = styled(Column)`\r\ngrid-template-columns: repeat(2, 2fr);\r\ngrid-template-rows: 1;\r\nwidth: 100%;\r\nmax-width: 1200px;\r\nheight: auto;\r\ntext-align: left;\r\njustify-content: center;\r\ncolumn-gap: 20px;\r\nrow-gap: 20px;\r\n@media (max-width: 600px){\r\n  grid-template-columns: repeat(1, 1fr);\r\n  width: 80%;\r\n}\r\n`\r\n\r\nexport const TwoColumnHeader = styled(Column)`\r\n// grid-template-columns: repeat(2, 2fr);\r\ngrid-template-columns: 1fr auto;\r\ngrid-template-rows: 1;\r\nwidth: 100%;\r\n// max-width: 2000px;\r\nheight: auto;\r\ntext-align: center;\r\njustify-content: center;\r\ncolumn-gap: 0px;\r\nrow-gap: 0px;\r\n@media (max-width: 1100px){\r\n  grid-template-columns: repeat(1, 1fr);\r\n  width: 100%;\r\n  margin-left: auto;\r\n    margin-right: auto;\r\n}\r\n@media (max-width: 600px){\r\n  grid-template-columns: repeat(1, 1fr);\r\n  width: 100%;\r\n}\r\n`\r\n\r\n\r\nexport const ColumnCenter = styled(Column)`\r\n  width: 100%;\r\n  align-items: center;\r\n  margin: auto;\r\n`\r\n\r\nexport const AutoColumn = styled.div<{\r\n  gap?: 'sm' | 'md' | 'lg' | string\r\n  justify?: 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between'\r\n}>`\r\n  display: grid;\r\n  grid-auto-rows: auto;\r\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\r\n  justify-items: ${({ justify }) => justify && justify};\r\n\r\n`\r\n\r\nexport const StyledOptions = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  @media (max-width: 450px){\r\n    justify-content: flex-start;\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nexport const StyledAutoColumn = styled(Column)`\r\n  flex-direction: row;\r\n  margin-bottom: 10px;\r\n  @media (max-width: 768px){\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nexport const StyledInputContainer = styled.div`\r\n  width: 100%;\r\n`\r\n\r\n\r\nexport default Column;","import React, {useContext} from 'react'\r\nimport styled, {ThemeContext} from 'styled-components'\r\nimport { Link} from 'react-router-dom'\r\nimport { Button, ButtonMenu, ButtonMenuItem, useModal } from '@sparkpointio/sparkswap-uikit'\r\n\r\nconst StyledNav = styled.div`\r\n  display: flex;\r\n  height: 7vh;\r\n  width: 100%;\r\n  margin-top: 15px;\r\n  border-bottom: 3px solid ${({theme}) => theme.colors.primary};\r\n`\r\n\r\nconst StyledButtonMenu = styled(ButtonMenu)`\r\n  & {\r\n    width: 100%;\r\n    flex: 2;\r\n    background-color: ${({theme}) => theme.colors.background};\r\n  }\r\n`\r\nconst StyledButton = styled(Button)`\r\n  flex: 1;\r\n  background-color: ${({theme}) => theme.colors.background};\r\n  color: ${({theme}) => theme.colors.textSubtle};\r\n  height: 7vh;\r\n`\r\n\r\nconst Nav = ({ activeIndex = 0 }: { activeIndex?: number }) => {\r\n    const theme = useContext(ThemeContext)\r\n\r\n  \r\n    return (\r\n      <StyledNav>\r\n      <StyledButtonMenu size=\"md\" activeIndex={activeIndex}  variant='primary'>\r\n        <ButtonMenuItem fullWidth id=\"swap-nav-link\" style={{height: '7vh', ...theme.isDark && {color: `${theme.isDark && theme.colors.text}`}}} >\r\n          Projects\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem fullWidth id=\"pool-nav-link\" href=\"https://stake.sparkswap.finance/#\" as=\"a\" style={{height: '7vh', ...theme.isDark && {color: `${theme.isDark && theme.colors.text}`} }}  >\r\n          Staking\r\n        </ButtonMenuItem>\r\n      </StyledButtonMenu>\r\n    </StyledNav>\r\n  )}\r\n  \r\n  export default Nav","import styled from 'styled-components';\r\nimport { Heading, Flex} from '@sparkpointio/sparkswap-uikit';\r\nimport Column from 'components/Column'\r\n\r\nconst Section = styled.div`\r\n    margin: 35px;\r\n    width: 100%;\r\n`\r\n\r\nexport const CardGroup = styled(Column)`\r\n    grid-template-columns: repeat(3, 1fr);\r\n    text-align: center;\r\n    row-gap: 35px;\r\n    column-gap: 35px;\r\n    margin-top: 20px;\r\n    @media (max-width: 1200px) {\r\n        grid-template-columns: repeat(2, 2fr);\r\n      }\r\n    @media (max-width: 768px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n      }\r\n      \r\n`\r\n\r\nexport const Container = styled(Flex)`\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px;\r\n    max-width: 1200px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`;\r\nexport const SectionTitle = styled(Heading)`\r\n    font-size: 24px;\r\n`;\r\n\r\nexport default Section;","import React, { useEffect, useState } from 'react';\r\nimport { Modal, Flex, Heading, Text, Button } from '@sparkpointio/sparkswap-uikit';\r\nimport styled from 'styled-components'\r\nimport { toast } from 'react-toastify';\r\nimport { ExternalLink } from 'react-feather';\r\nimport { StyledImage } from 'pages/Launchpad/components/styled';\r\n\r\ninterface Rewards {\r\n    token: string;\r\n    amount: string;\r\n}\r\n\r\ninterface ModalProps {\r\n    title?: string;\r\n    onDismiss?: () => void;\r\n    rewards: Rewards;\r\n    contract: any\r\n}\r\n\r\nconst TokenIcon = styled(StyledImage)`\r\n    margin: 0px 4px 0px 4px;\r\n`\r\nconst ClaimModal: React.FC<ModalProps> = ({ title, onDismiss, rewards, contract }) => {\r\n    const [confirmed, setConfirm] = useState(false);\r\n    const [hash, setHash] = useState(\"https://bscscan.com/tx/\");\r\n    const handleConfirm = async () => {\r\n\r\n        try {\r\n            const tx = await contract.redeemTokens()\r\n            setHash(`https://bscscan.com/tx/${tx.hash}`)\r\n            setConfirm(true);\r\n        }\r\n        catch(e) {\r\n            const code = e.code;\r\n            const message = e.data ? e.data.message : e.message;\r\n            toast.error(`${code} ${message}`, {\r\n                position: 'top-right',\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n            });\r\n        }\r\n\r\n    }\r\n    const TokenReward:React.ReactElement = <span style={{fontWeight: 'bold',}}> {rewards.amount} <TokenIcon src={`${process.env.PUBLIC_URL}/images/icons/ownly.png`} size=\"18px\" />{rewards.token} tokens</span>\r\n    \r\n    return (\r\n        <Modal title=\"\" onDismiss={onDismiss}>\r\n            <Flex flexDirection=\"column\" alignItems=\"center\" style={{ marginTop: '-40px', maxWidth: '500px' }}>\r\n                {!confirmed ? (\r\n                    <>\r\n                        <Text fontSize=\"24px\" bold>\r\n                            Confirm Claim\r\n                        </Text>\r\n                        <Flex style={{ margin: '15px', textAlign: 'center' }}>\r\n                            <Text>In this step, you complete the transaction that claims your {TokenReward}.</Text>\r\n                        </Flex>\r\n                        <Flex style={{ width: '100%', padding: '24px' }}>\r\n                            <Button fullWidth onClick={handleConfirm}>Confirm</Button>\r\n                        </Flex>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                         <Text fontSize=\"24px\" bold>\r\n                            Claimed Succesfully\r\n                        </Text>\r\n                        <Flex style={{ margin: '15px', textAlign: 'center' }}>\r\n                            <Text>You have claimed your {TokenReward}. If desired, you may check Binance Smart Chain to confirm the transaction.</Text>\r\n                        </Flex>\r\n                        <a href={hash} target=\"_blank\" rel=\"noopener noreferrer\"><Text color=\"textSubtle\">View on BscScan <ExternalLink /></Text></a>\r\n                        <Flex style={{ width: '100%', padding: '24px' }}>\r\n                            <Button fullWidth onClick={onDismiss}>Close</Button>\r\n                        </Flex>\r\n                    </>\r\n                )}\r\n            </Flex>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ClaimModal;\r\n","export const StatusColor = {\r\n    live: '#32a31b',\r\n    upcoming: '#7a1ba3',\r\n    completed: '#8e98a5'\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Timer() {\r\n  const calculateTimeLeft = () => {\r\n    const year = new Date().getFullYear();\r\n    const difference = +new Date(`${year}-11-01 00:00:00`) - +new Date();\r\n    // const difference = +new Date(`${year}-${project.endDate}`) - +new Date();\r\n    // const difference = new Date(\"Jul 27, 2021 17:00:00\").getTime();\r\n    let timeLeft = {};\r\n    \r\n\r\n    if (difference > 0) {\r\n      timeLeft = {\r\n        d: Math.floor(difference / (1000 * 60 * 60 * 24)),\r\n        h: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n        m: Math.floor((difference / 1000 / 60) % 60),\r\n        s: Math.floor((difference / 1000) % 60),\r\n\r\n      };\r\n    }\r\n\r\n    return timeLeft;\r\n  };\r\n\r\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\r\n  const [year] = useState(new Date().getFullYear());\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setTimeLeft(calculateTimeLeft());\r\n    }, 1000);\r\n  });\r\n\r\n  const timerComponents = [];\r\n\r\n  Object.keys(timeLeft).forEach((interval) => {\r\n    if (!timeLeft[interval]) {\r\n      return;\r\n    }\r\n\r\n    timerComponents.push(\r\n        <span style={{color: '#FFFFFF'}}>\r\n        {timeLeft[interval]}{interval}{\" \"}\r\n      </span>\r\n    );\r\n  });\r\n\r\n  // return Ownly is Live after countdown expires\r\n  return (\r\n    <div>\r\n      {timerComponents.length ? timerComponents : <span> Live!</span>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","import React, { useContext, useEffect, useMemo, useState } from 'react';\r\nimport { Card, Flex, Progress, Text, Button, useModal} from '@sparkpointio/sparkswap-uikit';\r\nimport { TokenAmount } from '@sparkpointio/sparkswap-sdk';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { Globe, Send, Twitter } from 'react-feather';\r\nimport { BNB, OWN } from 'config';\r\nimport { ThemeContext } from 'styled-components';\r\nimport UnlockButton from 'components/ConnectWalletButton';\r\nimport SvgIcon from 'components/SvgIcon';\r\nimport ClaimModal from 'components/Modals/ClaimModal';\r\nimport { StatusColor } from 'pages/styled';\r\nimport { IProjects, STATE } from 'config/constants/type';\r\nimport { useLaunchpadContract } from 'hooks/useContracts';\r\nimport { calculateLaunchpadStats, getRedeem } from 'utils/contractHelpers';\r\nimport Timer from 'pages/Home/HeaderSection/timer';\r\nimport { ReactComponent as MediumIcon } from './icons/MediumIcon.svg';\r\nimport {\r\n    CardAction,\r\n    DataGroup,\r\n    Details,\r\n    Options,\r\n    ProgressGroup,\r\n    SocmedGroup,\r\n    StyledButton,\r\n    StyledCardBody,\r\n    StyledCardHeader,\r\n    StyledHeading,\r\n    StyledImage,\r\n    TimerButton,\r\n} from './styled';\r\nimport Anchor, { StyledLink } from './StyledLink';\r\n\r\n\r\n\r\nconst LaunchCard: React.FC<IProjects> = (project) => {\r\n    // const { category, address, buyingCoin, sellingCoin, title, image, wallpaperBg, desc, totalRaise, ownSale, status, socMeds } = project;\r\n    const { category, address, buyingCoin, sellingCoin, title, image, wallpaperBg, desc, totalRaise, ownSale, status, socMeds } = project;\r\n\r\n    const [stats, setStats] = useState({\r\n        totalForSaleTokens: '00.00',\r\n        remainingForSale: '00.00',\r\n        totalSales: '00.00',\r\n        expectedSales: '00.00',\r\n        percentage: '00.00',\r\n        totalSoldTokens: '00.00'\r\n    });\r\n\r\n    const [redeemable, setRedeemable] = useState(false)\r\n    const [redeemable1, setRedeemable1] = useState(false)\r\n\r\n    const { account } = useWeb3React();\r\n    const contract = useLaunchpadContract(category);\r\n    const contract1 = useLaunchpadContract(\"ownlyLaunchPad1\");\r\n    const theme = useContext(ThemeContext);\r\n    const srcs = `${process.env.PUBLIC_URL}/images/icons/${image}`;\r\n    const srcsBg = `${process.env.PUBLIC_URL}/images/icons/${wallpaperBg}`;\r\n\r\n    useEffect(() => {\r\n        calculateLaunchpadStats(contract, project).then((r) => setStats(r));\r\n    }, [contract, contract1, project, account]);\r\n\r\n    const numberWithCommas = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    }\r\n\r\n    // Pass the value to the modal here \r\n    // Todo: change to actual value and add token name for the image\r\n    const [accountDetails, setAccountDetails] = useState({\r\n        r1: {\r\n            token: '',\r\n            amount: '',\r\n        },\r\n        r2: {\r\n            token: '',\r\n            amount: ''\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        setAccountDetails({\r\n            r1: {\r\n                token: 'OWN',\r\n                amount: '5000'\r\n            },\r\n            r2: {\r\n                token: 'NWO',\r\n                amount: '10000'\r\n            }\r\n        })\r\n\r\n        const calc = (num) => {\r\n            return num.match(/^-?\\d+(?:\\.\\d{0,18})?/)[0]\r\n        }\r\n        \r\n\r\n                \r\n        getRedeem(contract, account).then((r) => {\r\n            setRedeemable(parseInt(r.amount) === 0 ? false : r.redeemable) \r\n            getRedeem(contract1, account).then((r1) => {\r\n                setRedeemable1(parseInt(r1.amount) === 0 ? false : r1.redeemable)\r\n                setAccountDetails({\r\n                    r1: {\r\n                        token: 'OWN',\r\n                        amount: new TokenAmount(OWN, r1.amount).toExact()\r\n                    },\r\n                    r2: {\r\n                        token: 'OWN',\r\n                        amount: new TokenAmount(OWN, r.amount).toExact()\r\n                    }\r\n                })\r\n                console.log(r1.amount === 0)\r\n            })\r\n        })\r\n        \r\n    }, [contract, contract1, project, account])\r\n\r\n    \r\n    const [ onClaimR1Modal ] = useModal(<ClaimModal rewards={accountDetails.r1} contract={contract1} />)\r\n    const [ onClaimR2Modal ] = useModal(<ClaimModal rewards={accountDetails.r2} contract={contract} />)\r\n    \r\n    const percentage = parseFloat(stats.percentage).toFixed(4)\r\n    const totalSales = parseFloat(stats.totalSales).toFixed(4)\r\n    const totalSoldTokens = parseFloat(stats.totalSoldTokens).toFixed(4).replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    const remainingForSale = parseFloat(stats.remainingForSale).toFixed(4).replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    const expectedSales = parseFloat(stats.expectedSales).toFixed(2)\r\n    return (\r\n        <Card style={{ padding: '5px' }}>\r\n            <StyledCardHeader src={srcsBg}>\r\n                <StyledImage src={srcs} alt=\"token-logo\" />\r\n                <StyledHeading bold>{title}</StyledHeading>\r\n            </StyledCardHeader>\r\n            <StyledCardBody>\r\n                <Options>\r\n                    <SocmedGroup>\r\n                        <Anchor href={socMeds?.[0]}>\r\n                            <Globe size=\"24px\" />\r\n                        </Anchor>\r\n                        <Anchor href={socMeds?.[1]}>\r\n                            <Twitter size=\"24px\" fill={theme.colors.text} />\r\n                        </Anchor>\r\n                        <Anchor href={socMeds?.[2]}>\r\n                            <Send size=\"24px\" fill={theme.colors.text} />\r\n                        </Anchor>\r\n                        <Anchor href={socMeds?.[3]}>\r\n                            <SvgIcon width={24} Icon={MediumIcon} />\r\n                        </Anchor>\r\n                    </SocmedGroup>\r\n                    {status === STATE.active ? (\r\n                        <StyledButton style={{ backgroundColor: StatusColor.live }}>LIVE NOW</StyledButton>\r\n                    ) : status === STATE.upcoming ? (\r\n                        <StyledButton style={{ backgroundColor: StatusColor.upcoming }}>UPCOMING</StyledButton>\r\n                    ) : (\r\n                        <StyledButton style={{ backgroundColor: StatusColor.completed }}>COMPLETED</StyledButton>\r\n                    )}\r\n                </Options>\r\n                    {status === STATE.upcoming ? (\r\n                        <ProgressGroup>\r\n                            {/* <TimerButton>${sellingCoin.symbol} Going Live in:&nbsp; <Timer/></TimerButton> */}\r\n                            {address === \"0x005\"? \r\n                            <TimerButton> Going Live Soon! </TimerButton> :\r\n                            <TimerButton> Going Live in:&nbsp; <Timer/></TimerButton>\r\n                            }\r\n                        </ProgressGroup>    \r\n                    ) : status === STATE.active ? (\r\n                        <ProgressGroup/>\r\n                    ) : (\r\n                        <ProgressGroup/>\r\n                    )}\r\n                <Details>\r\n                    {status === STATE.active ? (\r\n                        <div style={{height: '70px', maxHeight: '80px', minHeight: '70px', marginBottom: '30px', marginTop: '-25px'}}>\r\n                            <Text>{desc}</Text>\r\n                        </div>\r\n                    ) : status === STATE.upcoming ? (\r\n                        <div style={{height: '70px', maxHeight: '80px', minHeight: '70px', marginBottom: '10px', marginTop: '10px'}}>\r\n                            <Text>{desc}</Text>\r\n                        </div>\r\n                        ) : (\r\n                        <div style={{height: '70px', maxHeight: '80px', minHeight: '70px', marginBottom: '30px', marginTop: '-25px'}}>\r\n                            <Text>{desc}</Text>\r\n                        </div>\r\n                    )}\r\n                    <ProgressGroup>\r\n                        {status === STATE.completed ? (\r\n                            <Text as=\"h1\">Sale Completion</Text>\r\n                        ) : status === STATE.upcoming ? (\r\n                            <Text as=\"h1\">Progress</Text>\r\n                        ) : (\r\n                            <Text as=\"h1\">Progress</Text>\r\n                        )}\r\n\r\n                        {status === STATE.upcoming ? (\r\n                            <Progress primaryStep={0} variant=\"flat\" />\r\n                        ) : (\r\n                            <Progress primaryStep={parseFloat(percentage)} variant=\"flat\" />\r\n                        )}\r\n\r\n                        {status === STATE.upcoming ? (\r\n                            <Flex justifyContent=\"space-between\">\r\n                                <Text color=\"textSubtle\" fontSize=\"90%\">{0}%</Text>\r\n                                <Text color=\"textSubtle\" fontSize=\"90%\">\r\n                                    {/* {0} / {totalRaise} {buyingCoin.symbol} */}\r\n                                    {0} / 0 {buyingCoin.symbol}\r\n                                </Text>\r\n                            </Flex>\r\n                        ) : (\r\n                            <Flex justifyContent=\"space-between\">\r\n                                <Text color=\"textSubtle\">{percentage}%</Text>\r\n                                <Text color=\"textSubtle\">\r\n                                   {/* {totalSales} / {expectedSales} {buyingCoin.symbol} */}\r\n                                    261.33 / 261.33 {buyingCoin.symbol}\r\n                                </Text>\r\n                            </Flex>\r\n                        )}          \r\n\r\n                    </ProgressGroup>\r\n                    <DataGroup flexDirection=\"column\">\r\n\r\n                        {status === STATE.upcoming ? (\r\n                            <Flex justifyContent=\"space-between\">\r\n                                <Text color=\"textSubtle\">Total Raised</Text>\r\n                                <Text>\r\n                                    {/* {0} {buyingCoin.symbol} */}\r\n                                    -\r\n                                </Text>\r\n                            </Flex>\r\n                        ) : (\r\n                            <Flex justifyContent=\"space-between\">\r\n                                <Text color=\"textSubtle\">Total Raised</Text>\r\n                                <Text>\r\n                                    261.33 {buyingCoin.symbol}\r\n                                </Text>\r\n                            </Flex>\r\n                        )}\r\n\r\n                        <Flex justifyContent=\"space-between\">\r\n                        {status === STATE.upcoming ? (\r\n                            <Text color=\"textSubtle\">Coming Soon For Sale</Text>\r\n                        ) : status === STATE.completed ? (\r\n                            <Text color=\"textSubtle\">${sellingCoin.symbol} Sold</Text>\r\n                        ) : (\r\n                            <Text color=\"textSubtle\">${sellingCoin.symbol} For Sale</Text>\r\n                        )}\r\n\r\n                        {status === STATE.upcoming ? (\r\n                            // <Text>{numberWithCommas(ownSale)} {sellingCoin.symbol}</Text>\r\n                            <Text> - </Text>\r\n                        ) : status === STATE.completed ? (\r\n                            <Text>{stats.totalSoldTokens === '0' ? '-' : totalSoldTokens}</Text>\r\n                        ) : (\r\n                            <Text>{stats.remainingForSale === '0' ? '-' : remainingForSale}</Text>\r\n                        )}\r\n                        </Flex>\r\n                        \r\n                        <Flex justifyContent=\"space-between\">\r\n                            <Text color=\"textSubtle\">Buying Coin</Text>\r\n                            {status === STATE.upcoming ? <Text>{buyingCoin.symbol}</Text> : <Text>{buyingCoin.symbol}</Text>}\r\n                        </Flex>\r\n                    </DataGroup>\r\n                </Details>\r\n            </StyledCardBody>\r\n            {status === STATE.active? (\r\n                <CardAction>\r\n                    {!account ? (\r\n                        <UnlockButton fullWidth />\r\n                    ) : (\r\n                        <StyledLink to={`/projects/${address}`}>\r\n                            <h1 style={{ color: 'white' }}>Participate</h1>\r\n                        </StyledLink>\r\n                    )}\r\n                </CardAction>\r\n            ): status === STATE.completed && (\r\n                <CardAction flexDirection=\"column\">\r\n                    {redeemable1 ? (\r\n                        <Button fullWidth onClick={onClaimR1Modal}>Claim R1 Allocations</Button>\r\n                    ) : (<Button disabled fullWidth>No available R1 claims</Button>) }\r\n                    {redeemable ? (\r\n                        <Button fullWidth onClick={onClaimR2Modal}>Claim R2 Allocations</Button>\r\n                    ) : (<Button disabled fullWidth>No available R2 claims</Button>) }\r\n                    \r\n                </CardAction>\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default LaunchCard;\r\n","import React from 'react';\r\nimport { CardGroup } from '../styled';\r\nimport Card from './LaunchCard';\r\nimport { IProjects } from '../../../config/constants/type';\r\nimport {useLaunchpadContract} from \"../../../hooks/useContracts\";\r\n\r\ninterface Props {\r\n    ProjectList?: Array<IProjects>\r\n}\r\n\r\nconst CardContainer: React.FC<Props> = (props) => {\r\n    const { ProjectList } = props;\r\n    const pages = ProjectList?.map((item) => {\r\n        return (\r\n            <Card\r\n            key={item.address}\r\n                {... item}\r\n            />\r\n        );\r\n    })\r\n    return (\r\n        <CardGroup>\r\n            {pages}\r\n        </CardGroup>\r\n    );\r\n};\r\n\r\nexport default CardContainer;\r\n","import React, { useMemo } from 'react';\r\nimport { useProject } from 'state/hooks';\r\nimport Page from 'components/layout/Page';\r\nimport CardNav from 'components/CardNav';\r\nimport { STATE } from 'config/constants/type';\r\nimport Section, { Container, SectionTitle } from './styled';\r\nimport CardContainer from './components/CardContainer';\r\n\r\n\r\nconst LaunchpadHome: React.FC = () => {\r\n    const { data: ProjectsLS } = useProject();\r\n\r\n    const ActiveProjects = useMemo(() => ProjectsLS.filter((project) => project.status === STATE.active), [ProjectsLS]);\r\n    const UpcomingProjects = useMemo(() => ProjectsLS.filter((project) => project.status === STATE.upcoming), [ProjectsLS]);\r\n    const CompletedProjects = useMemo(\r\n        () => ProjectsLS.filter((project) => project.status === STATE.completed),\r\n        [ProjectsLS],\r\n    );\r\n\r\n    return (\r\n        <Page>\r\n            <Container>\r\n                <CardNav />\r\n                {ActiveProjects.length !==0 && (<Section>\r\n                    <SectionTitle>Ongoing Launches</SectionTitle>\r\n                    <CardContainer ProjectList={ActiveProjects} />\r\n                </Section>\r\n                )}\r\n                {UpcomingProjects.length !== 0 && (\r\n                    <Section>\r\n                        <SectionTitle>Upcoming Launches</SectionTitle>\r\n                        <CardContainer ProjectList={UpcomingProjects} />\r\n                    </Section>\r\n                )}\r\n                {CompletedProjects.length !== 0 && (\r\n                    <Section>\r\n                        <SectionTitle>Completed Launches</SectionTitle>\r\n                        <CardContainer ProjectList={CompletedProjects} />\r\n                    </Section>\r\n                )}\r\n            </Container>\r\n        </Page>\r\n    );\r\n};\r\n\r\nexport default LaunchpadHome;\r\n"],"sourceRoot":""}