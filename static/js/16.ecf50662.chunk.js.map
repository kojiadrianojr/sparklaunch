{"version":3,"sources":["components/NumericalInput/index.tsx","components/Row/index.tsx","components/CurrencyInputPanel/index.tsx","components/Modals/PurchaseModal.tsx","state/tokens/hooks.ts","pages/Launchpad/Project/styled.ts","pages/Launchpad/Project/FooterDetails.tsx","pages/Launchpad/Project/ProjectComponent.tsx","pages/Launchpad/Project/Layout.tsx"],"names":["StyledInput","styled","input","error","theme","colors","failure","text","align","textSubtle","inputRegex","RegExp","Input","React","memo","value","onUserInput","placeholder","rest","onChange","event","nextUserInput","target","replace","test","escapeRegExp","inputMode","title","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck","Row","Box","padding","border","borderRadius","RowBetween","InputRow","div","gap","justify","Aligner","button","selected","darken","span","InputPanel","hideInput","background","Container","shadows","inset","CurrencyInputPanel","onMax","showMaxButton","label","currency","remainingSupply","hideBalance","id","showCommonBases","useState","setModalOpen","account","useWeb3React","useContext","ThemeContext","useCallback","fontSize","style","src","process","symbol","toLowerCase","size","length","slice","className","onClick","variant","maxWidth","width","display","cursor","ToastTitle","Text","StyledHeading","ActionDiv","Flex","PurchaseModal","onDismiss","address","stats","library","useActiveWeb3React","contract","useOwnlyLaunchpad","project","useFindProjectByAddress","token","useAppSelector","state","tokens","data","find","t","useSelectToken","buyingCoin","setInput","output","setOutput","balance","TokenAmount","BNB","BigInt","amount","OWN","maxPayableAmount","rewardedAmount","redeemed","whitelist","accountDetails","setAccountDetails","tokenRate","setTokenRate","remainingExpendable","setRemainingExpendable","remainingPurchasable","setRemainingPurchasable","calculateInput","tokenAmount","calculatedInput","expandValue","multiply","toFixed","toExact","calculateOutput","calculatedOutput","divide","validateInput","greaterThan","validateOutput","SuccessMessage","tx","hash","link","alignItems","flexDirection","href","textDecoration","color","primary","handleBuy","a","buyTokens","toast","success","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","getAccountDetailsLaunchPad","then","r","code","message","position","useEffect","getWhitelist","details","_maxPayableAmount","_rewardedAmount","subtract","calc","num","match","getRemainingPurchasable","getBalance","b","remainingP","_balance","toBigInt","marginBottom","marginTop","bold","remainingForSale","maxInput","maxOutput","fullWidth","CCont","Card","CHeader","CardHeader","TokenImage","img","SmalltokenImage","CBody","CardBody","StyledButton","Button","CustomDataGroup","DataGroup","CFooter","TableDiv","TBHeader","TBBody","TextDescription","NavOptions","activeIndex","FooterNav","handleClick","CustomThemeContext","margin","AllocationSection","justifyContent","FooterDetails","pool","customTheme","setActive","open","close","cap","totalUserParticipated","totalFundsSwapped","i","useLaunchpadContract","category","totalForSaleTokens","totalSoldTokens","totalSales","expectedSales","percentage","totalParticipants","setStats","calculateLaunchpadStats","parseFloat","backgroundColor","isDark","customColors","BG1","BG2","borderBottom","flex","marginRight","marginLeft","ownSale","toLocaleString","Allocations","tokenImage","allocation","srcs","alt","ActionCard","whiteListed","Paddress","getFindProject","sellingCoin","maxExpendable","catch","console","log","useModal","onPurchaseModal","progress","as","name","primaryStep","image","disabled","ProjectComponent","setWhiteList","acc","useAccountWhiteList","useGetPoolsByAddress","longDesc","longDesc2","longDesc3","socMeds","wallpaperBg","status","history","useHistory","STATE","active","push","srcsBg","fill","SvgIcon","Icon","MediumIcon","upcoming","BackButton","Link","Layout","ProjectAddress","params","setProject","projects","p","Page","minHeight","to"],"mappings":"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","file":"static/js/16.ecf50662.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { escapeRegExp } from '../../utils'\r\n\r\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\r\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\r\n  width: 0;\r\n  position: relative;\r\n  font-weight: 500;\r\n  outline: none;\r\n  border: none;\r\n  flex: 1 1 auto;\r\n  background-color: transparent;\r\n  font-size: 16px;\r\n  text-align: ${({ align }) => align && align};\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  padding: 0px;\r\n  -webkit-appearance: textfield;\r\n  ::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n  }\r\n  [type='number'] {\r\n    -moz-appearance: textfield;\r\n  }\r\n  ::-webkit-outer-spin-button,\r\n  ::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n  ::placeholder {\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n  }\r\n`\r\n\r\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\r\n\r\nexport const Input = React.memo(function InnerInput({\r\n  value,\r\n  onUserInput,\r\n  placeholder,\r\n  ...rest\r\n}: {\r\n  value: string | number\r\n  onUserInput: (input: string) => void\r\n  error?: boolean\r\n  fontSize?: string\r\n  align?: 'right' | 'left'\r\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\r\n  const enforcer = (nextUserInput: string) => {\r\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\r\n      onUserInput(nextUserInput)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledInput\r\n      {...rest}\r\n      value={value}\r\n      onChange={event => {\r\n        // replace commas with periods, because uniswap exclusively uses period as the decimal separator\r\n        enforcer(event.target.value.replace(/,/g, '.'))\r\n      }}\r\n      // universal input options\r\n      inputMode=\"decimal\"\r\n      title=\"Token Amount\"\r\n      autoComplete=\"off\"\r\n      autoCorrect=\"off\"\r\n      // text-specific options\r\n      type=\"text\"\r\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n      placeholder={placeholder || '0.0'}\r\n      minLength={1}\r\n      maxLength={79}\r\n      spellCheck=\"false\"\r\n    />\r\n  )\r\n})\r\n\r\nexport default Input\r\n","import styled from 'styled-components'\r\nimport { Box } from 'rebass/styled-components'\r\n\r\nconst Row = styled(Box)<{ align?: string; padding?: string; border?: string; borderRadius?: string }>`\r\n  width: 100%;\r\n  display: flex;\r\n  padding: 0;\r\n  align-items: ${({ align }) => (align || 'center')};\r\n  padding: ${({ padding }) => padding};\r\n  border: ${({ border }) => border};\r\n  border-radius: ${({ borderRadius }) => borderRadius};\r\n`\r\n\r\nexport const RowBetween = styled(Row)`\r\n  justify-content: space-between;\r\n  margin: 4px 0 4px 0;\r\n`\r\nexport const RowFlat = styled.div`\r\n  display: flex;\r\n  align-items: flex-end;\r\n`\r\n\r\nexport const AutoRow = styled(Row)<{ gap?: string; justify?: string }>`\r\n  flex-wrap: wrap;\r\n  margin: ${({ gap }) => gap && `-${gap}`};\r\n  justify-content: ${({ justify }) => justify && justify};\r\n  & > * {\r\n    margin: ${({ gap }) => gap} !important;\r\n  }\r\n`\r\n\r\nexport const RowFixed = styled(Row)<{ gap?: string; justify?: string }>`\r\n  width: fit-content;\r\n  margin: ${({ gap }) => gap && `-${gap}`};\r\n`\r\n\r\nexport default Row\r\n","import React, { useState, useCallback, useContext } from 'react'\r\nimport { Button, ChevronDownIcon, Dropdown, Text } from '@sparkpointio/sparkswap-uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport { darken } from 'polished'\r\nimport { IProjects, ITokens } from 'config/constants/type'\r\nimport { StyledImage } from 'pages/Launchpad/components/styled'\r\nimport { Currency } from 'components/types'\r\nimport { Input as NumericalInput } from '../NumericalInput'\r\nimport { RowBetween } from '../Row'\r\nimport CurrencyLogo from '../CurrencyLogo'\r\n\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\n\r\nconst InputRow = styled.div`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  align-items: center;\r\n  padding: 0.75rem 0.75rem 0.75rem 1rem;\r\n`\r\nconst CurrencySelect = styled.button<{ selected: boolean }>`\r\n  align-items: center;\r\n  height: 34px;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  background-color: transparent;\r\n  color: ${({ selected, theme }) => (selected ? theme.colors.text : '#FFFFFF')};\r\n  border-radius: 12px;\r\n  outline: none;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  border: none;\r\n  padding: 0 0.5rem;\r\n  :focus,\r\n  :hover {\r\n    background-color: ${({ theme }) => darken(0.05, theme.colors.input)};\r\n  }\r\n`\r\n\r\nconst LabelRow = styled.div`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  font-size: 0.75rem;\r\n  line-height: 1rem;\r\n  padding: 0.75rem 1rem 0 1rem;\r\n  span:hover {\r\n    cursor: pointer;\r\n    color: ${({ theme }) => darken(0.2, theme.colors.textSubtle)};\r\n  }\r\n`\r\n\r\nconst Aligner = styled.span`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst InputPanel = styled.div<{ hideInput?: boolean }>`\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  position: relative;\r\n  // border-radius: ${({ hideInput }) => (hideInput ? '8px' : '20px')};\r\n  // background-color: ${({ theme }) => theme.colors.background};\r\n  z-index: 1;\r\n`\r\n\r\nconst Container = styled.div<{ hideInput: boolean }>`\r\n  // border-radius: 16px;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n`\r\n\r\n\r\ninterface CurrencyInputPanelProps {\r\n  value: string\r\n  onUserInput: (value: string) => void\r\n  onMax?: () => void\r\n  showMaxButton: boolean\r\n  label?: string\r\n  currency?: Currency | null\r\n  hideInput?: boolean\r\n  hideBalance?: boolean\r\n  remainingSupply?: string\r\n  id: string\r\n  showCommonBases?: boolean\r\n}\r\n\r\nexport default function CurrencyInputPanel({\r\n    value,\r\n    onUserInput,\r\n    onMax,\r\n    showMaxButton,\r\n    label,\r\n    currency,\r\n    remainingSupply = '',\r\n    hideBalance = false,\r\n    hideInput = false,\r\n    id,\r\n    showCommonBases,\r\n  }: CurrencyInputPanelProps) {\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const { account } = useWeb3React()\r\n    // const selectedCurrencyBalance = useCurrencyBalance(account ?? undefined, currency ?? undefined)\r\n    const selectedCurrencyBalance = 22222\r\n    const theme = useContext(ThemeContext)\r\n    const handleDismissSearch = useCallback(() => {\r\n      setModalOpen(false)\r\n    }, [setModalOpen])\r\n\r\n    return (\r\n      <InputPanel id={id}>\r\n        <Text fontSize=\"14px\">{label}</Text>\r\n        <Container hideInput={hideInput}>\r\n          <InputRow style={hideInput ? { padding: '0', borderRadius: '8px' } : {}} >\r\n          <Aligner>\r\n                {/* <CurrencyLogo currency={currency} size=\"24px\" style={{ marginRight: '8px' }} /> */}\r\n                <StyledImage src={`${process.env.PUBLIC_URL}/images/icons/${currency?.symbol?.toLowerCase()}.png`} size=\"24px\" />\r\n                <Text>\r\n                {(currency && currency.symbol && currency.symbol.length > 20\r\n                    ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\r\n                        currency.symbol.length - 5,\r\n                        currency.symbol.length\r\n                      )}`\r\n                    : currency?.symbol)}\r\n                    &nbsp;\r\n                </Text>\r\n            </Aligner>\r\n            {!hideInput && (\r\n              <>\r\n                <NumericalInput\r\n                  className=\"token-amount-input\"\r\n                  value={value}\r\n                  onUserInput={onUserInput}\r\n                />\r\n                {account && currency && showMaxButton && (\r\n                  <Button onClick={onMax} size=\"sm\" variant=\"primary\" style={{maxWidth: '50px', width: '20%', fontSize: '14px'}}>\r\n                    MAX\r\n                  </Button>\r\n                )}\r\n              </>\r\n            )}\r\n          </InputRow>\r\n        </Container>\r\n        {!hideInput && (\r\n\r\n          <RowBetween>\r\n              {account && (\r\n                <Text onClick={onMax} fontSize=\"14px\" style={{ display: 'inline', cursor: 'pointer' }}>\r\n                  {!hideBalance && !!currency\r\n                    ? `Remaining: ${remainingSupply} ${currency.symbol}`\r\n                    : ' -'}\r\n\r\n                </Text>\r\n              )}\r\n          </RowBetween>\r\n\r\n        )}\r\n      </InputPanel>\r\n    )\r\n  }\r\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { TokenAmount } from '@sparkpointio/sparkswap-sdk';\r\nimport { ExternalLink } from 'react-feather';\r\nimport { parseUnits } from '@ethersproject/units';\r\nimport { toast } from 'react-toastify';\r\nimport { useFindProjectByAddress } from 'state/hooks';\r\nimport { useSelectToken } from 'state/tokens/hooks';\r\nimport CurrencyInputPanel from 'components/CurrencyInputPanel';\r\nimport { Button, Flex, Heading, Modal, Text } from '@sparkpointio/sparkswap-uikit';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { SmallstyledImage } from 'pages/Launchpad/components/styled';\r\nimport Priceperbnb from 'hooks/Priceperbnb';\r\nimport { useOwnlyLaunchpad } from '../../hooks/useContracts';\r\nimport { BNB, OWN } from '../../config';\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React';\r\nimport { expandValue } from '../../utils';\r\nimport { getAccountDetailsLaunchPad } from '../../utils/contractHelpers';\r\n\r\n\r\n\r\ninterface Stats {\r\n    totalForSaleTokens: string; \r\n    totalSoldTokens: string;\r\n    remainingForSale: string;\r\n    totalSales: string;\r\n    expectedSales: string;\r\n    percentage: string;\r\n    tokenRate: string;\r\n    totalParticipants: string;\r\n}\r\n\r\ninterface AppProps {\r\n    onDismiss?: () => void;\r\n    address: string | null | undefined;\r\n    stats: Stats;\r\n}\r\n\r\nconst ToastTitle = styled(Text)`\r\n    color: #EAE2FC;\r\n    margin-bottom: 4px;\r\n`\r\nconst StyledHeading = styled(Text)`\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n`;\r\nconst ActionDiv = styled(Flex)`\r\n    margin-top: 24px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst PurchaseModal: React.FC<AppProps> = ({ onDismiss, address, stats }) => {\r\n    const { library } = useActiveWeb3React();\r\n    const { account } = useWeb3React();\r\n    const contract = useOwnlyLaunchpad();\r\n    const project = useFindProjectByAddress(address);\r\n    const token = useSelectToken(project.buyingCoin.address);\r\n\r\n    const [input, setInput] = useState('');\r\n    const [output, setOutput] = useState('');\r\n    const [accountDetails, setAccountDetails] = useState({\r\n        balance: new TokenAmount(BNB, BigInt(0)),\r\n        amount: new TokenAmount(OWN, BigInt(0)),\r\n        maxPayableAmount: new TokenAmount(OWN, BigInt(0)),\r\n        rewardedAmount: new TokenAmount(OWN, BigInt(0)),\r\n        redeemed: false,\r\n        whitelist: false\r\n    });\r\n\r\n    const [tokenRate, setTokenRate] = useState(new TokenAmount(OWN, BigInt(0)));\r\n    const [remainingExpendable, setRemainingExpendable] = useState(new TokenAmount(OWN, BigInt(0)));\r\n    const [remainingPurchasable, setRemainingPurchasable] = useState(new TokenAmount(OWN, BigInt(0)));\r\n\r\n    /**\r\n     * Sets the input amount and calculates the output\r\n     * @param value\r\n     */\r\n    const handleTypeInput = (value: string) => {\r\n        setInput(value);\r\n        let tokenAmount = new TokenAmount(BNB, expandValue(value, BNB));\r\n        tokenAmount = validateInput(tokenAmount);\r\n        calculateOutput(tokenAmount);\r\n    };\r\n\r\n    /**\r\n     * Sets the output amount and calculates the input\r\n     * @param value\r\n     */\r\n    const handleTypeOutput = (value: string) => {\r\n        setOutput(value);\r\n        let tokenAmount = new TokenAmount(OWN, expandValue(value, OWN));\r\n        tokenAmount = validateOutput(tokenAmount);\r\n        calculateInput(tokenAmount);\r\n    };\r\n\r\n    /**\r\n     * Calculates the input based on the output\r\n     * @param tokenAmount\r\n     */\r\n    const calculateInput = (tokenAmount) => {\r\n        const calculatedInput = new TokenAmount(BNB, expandValue(tokenAmount.multiply(tokenRate).toFixed(18), BNB));\r\n        setInput(calculatedInput.toExact());\r\n\r\n        return calculatedInput;\r\n    };\r\n\r\n    /**\r\n     * Calculates the output based on the input\r\n     * @param tokenAmount\r\n     */\r\n    const calculateOutput = (tokenAmount) => {\r\n        const calculatedOutput = new TokenAmount(BNB, expandValue(tokenAmount.divide(tokenRate).toFixed(18), OWN));\r\n        setOutput(calculatedOutput.toExact());\r\n\r\n        return calculatedOutput;\r\n    };\r\n\r\n    /**\r\n     * Validates if the input does not exceed remainingExpandable and equivalent output does not exceed remainingPurchasable\r\n     * @param tokenAmount\r\n     */\r\n    const validateInput = (tokenAmount) => {\r\n        const equivalentOutput = calculateOutput(tokenAmount);\r\n\r\n        if (equivalentOutput.greaterThan(remainingPurchasable)) {\r\n            tokenAmount = calculateInput(remainingPurchasable);\r\n            calculateOutput(tokenAmount)\r\n        }\r\n\r\n        return tokenAmount;\r\n    };\r\n\r\n    /**\r\n     * Validates if the output does not exceed remainingPurchasable and equivalent input does not exceed remainingExpandable\r\n     * @param tokenAmount\r\n     */\r\n    const validateOutput = (tokenAmount) => {\r\n        const equivalentInput = calculateInput(tokenAmount);\r\n\r\n        if (equivalentInput.greaterThan(remainingExpendable)) {\r\n            tokenAmount = calculateOutput(remainingExpendable);\r\n            calculateInput(tokenAmount);\r\n        }\r\n\r\n        return tokenAmount;\r\n    };\r\n\r\n    /**\r\n     * Sets and checks the max input\r\n     */\r\n    const handleMaxInput = () => {\r\n        let maxInput = remainingExpendable;\r\n\r\n        maxInput = validateInput(maxInput);\r\n\r\n        setInput(maxInput.toExact());\r\n    };\r\n\r\n    /**\r\n     * Sets and checks the max output\r\n     */\r\n    const handleMaxOutput = () => {\r\n        let maxOutput = remainingPurchasable;\r\n\r\n        maxOutput = validateOutput(maxOutput);\r\n\r\n        setOutput(maxOutput.toExact());\r\n    };\r\n\r\n    /**\r\n     * Initiates buy token\r\n     */\r\n\r\n    const SuccessMessage = ({tx, value, symbol}) => {\r\n        const theme = useContext(ThemeContext);\r\n        const { hash } = tx\r\n        const link = `https://testnet.bscscan.com/tx/${hash}`\r\n        return (\r\n            <Flex alignItems=\"center\" flexDirection=\"column\">\r\n                <ToastTitle>{`Successfully bought ~ ${value} ${symbol} tokens!`}</ToastTitle>\r\n                <a href={link} style={{fontSize:'12px', textDecoration: 'underline', color: theme.colors.primary}}>View on BscScan <ExternalLink size=\"12px\"/></a>\r\n            </Flex>\r\n        )\r\n    }\r\n\r\n    const handleBuy = async() => {\r\n        try {\r\n            const tx = await contract.buyTokens({value: expandValue(input, BNB)})\r\n            \r\n            toast.success(<SuccessMessage tx={tx} value={input} symbol={project.symbol}/>, {\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n            })\r\n            getAccountDetailsLaunchPad(contract, project, library, account).then((r) => setAccountDetails(r));\r\n        }\r\n        catch(e) {\r\n            const code = e.code;\r\n            const message = e.data ? e.data.message : e.message;\r\n            toast.error(`${code} ${message}`, {\r\n                position: 'top-right',\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n            });\r\n        }\r\n        // console.log(tx);\r\n        // console.log(`Buying successful ${tx}`)\r\n    };\r\n\r\n    useEffect(() => {\r\n        async function getRemainingPurchasable() {\r\n            const details = await contract.getWhitelist(account);\r\n            const maxPayableAmount = new TokenAmount(OWN, details._maxPayableAmount);\r\n            const rewardedAmount = new TokenAmount(OWN, details._rewardedAmount);\r\n            return maxPayableAmount.subtract(rewardedAmount);\r\n        }\r\n\r\n        const calc = (num) => {\r\n            return num.match(/^-?\\d+(?:\\.\\d{0,18})?/)[0]\r\n        }\r\n        \r\n\r\n        const calculateMaxExpendable = (remainingP) => {\r\n            return new TokenAmount(BNB, expandValue( calc(remainingP.multiply(tokenRate).toFixed(19)), OWN));\r\n        };\r\n\r\n        const calculateMaxPurchasable = (remainingP) => {\r\n            return new TokenAmount(BNB, expandValue( calc(remainingP.divide(tokenRate).toFixed(19)), OWN));\r\n        };\r\n\r\n        getAccountDetailsLaunchPad(contract, project, library, account).then((r) => setAccountDetails(r));\r\n        contract.tokenRate().then((r) => setTokenRate(new TokenAmount(OWN, r)));\r\n        getRemainingPurchasable().then((r) => {\r\n            library.getBalance(account).then((b) => {\r\n                const _balance = new TokenAmount(BNB, (b.toBigInt()))\r\n                setRemainingPurchasable(calculateMaxPurchasable(_balance))\r\n                setRemainingExpendable(_balance);\r\n            })\r\n        });\r\n    }, [account, contract, library, input, output, tokenRate, project]);\r\n\r\n    return (\r\n        <Modal title=\"\" onDismiss={onDismiss}>\r\n            <div style={{ width: '400px', padding: '0px 24px 24px 24px' }}>\r\n                <div style={{ marginBottom: '24px', marginTop: '-24px' }}>\r\n                    <Heading bold fontSize=\"21px\">\r\n                        Swap Coins\r\n                    </Heading>\r\n                    <StyledHeading>{`Remaining: ${stats?.remainingForSale} ${project.symbol}`}</StyledHeading>\r\n                </div>\r\n                <CurrencyInputPanel\r\n                    label=\"From\"\r\n                    id=\"swap-input\"\r\n                    value={input}\r\n                    onUserInput={handleTypeInput}\r\n                    currency={token}\r\n                    showMaxButton\r\n                    onMax={handleMaxInput}\r\n                    remainingSupply={remainingExpendable.toExact()}\r\n                />\r\n                <CurrencyInputPanel\r\n                    showMaxButton\r\n                    onMax={handleMaxOutput}\r\n                    label=\"To\"\r\n                    id=\"swap-input\"\r\n                    value={output}\r\n                    onUserInput={handleTypeOutput}\r\n                    currency={project}\r\n                    remainingSupply={stats.remainingForSale}\r\n                />\r\n            \r\n                {/* <Text>Price per BNB: <Priceperbnb/> USD</Text> */}\r\n                <Text color=\"#FFFFFF\">{`Price: ${tokenRate.toExact()} ${project.symbol} per BNB `}</Text>\r\n\r\n                <ActionDiv>\r\n                    <Button onClick={handleBuy} fullWidth>\r\n                        Swap\r\n                    </Button>\r\n                </ActionDiv>\r\n                <ActionDiv>\r\n                    <Text>My Allocations</Text>\r\n                    <Flex alignItems=\"center\" marginTop=\"12px\">\r\n                        <SmallstyledImage src={`${process.env.PUBLIC_URL}/images/icons/${project?.symbol?.toLowerCase()}.png`} />\r\n                        <Text color=\"textSubtle\">{`${accountDetails.rewardedAmount.toExact()} ${project.symbol}`}</Text>\r\n                    </Flex>\r\n                </ActionDiv>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default PurchaseModal;\r\n","import { useAppSelector, useAppDispatch } from \"state/hooks\";\r\n\r\n\r\nexport const useAllTokens = () => useAppSelector((state) => state.tokens.data);\r\nexport const useSelectToken = (address: string | undefined) => useAppSelector((state) => state.tokens.data.find(t => t.address === address));","import styled from 'styled-components'\r\nimport { Card, CardHeader, CardBody, Button, Flex, Text} from '@sparkpointio/sparkswap-uikit';\r\nimport { SocmedGroup, ProgressGroup, DataGroup } from '../components/styled';\r\n\r\nexport const CCont = styled(Card)`\r\n    width: 100%;\r\n`;\r\nexport const CHeader = styled(CardHeader)<{ src?: string }>`\r\n    \r\n    display: flex;\r\n    align-items: center;\r\n    height: auto;\r\n    min-height: 10vh;\r\n    max-height: 15vh;\r\n    ${({ src }) => src &&`\r\n      background-image: url(${src});\r\n      background-repeat: no-repeat;\r\n      background-attachment: scroll;\r\n      background-position: 95% 15%;\r\n      background-size: cover;\r\n    `}\r\n`;\r\n\r\nexport const TokenImage = styled.img`\r\n    border-radius: 50%;\r\n    width: 60px;\r\n    height: 60px;\r\n    margin: 10px 15px;\r\n`;\r\n\r\nexport const SmalltokenImage = styled.img`\r\n    border-radius: 50%;\r\n    width: 30px;\r\n    height: 30px;\r\n    margin: 10px 15px;\r\n`;\r\n\r\nexport const CBody = styled(CardBody)`\r\n    padding: 20px;\r\n`;\r\n\r\nexport const StyledButton = styled(Button)`\r\n    cursor: context-menu;\r\n    height: 35px;\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport const CustomDataGroup = styled(DataGroup)`\r\n    &:before {\r\n        content: '';\r\n        border-top: 5px solid ${({ theme }) => theme.colors.primary};\r\n        padding-top: 10px;\r\n        margin-bottom: 10px;\r\n    }\r\n    &:after {\r\n        content: '';\r\n        border-bottom: 5px solid ${({ theme }) => theme.colors.primary};\r\n        padding-bottom: 10px;\r\n        margin-top: 10px;\r\n    }\r\n`;\r\n\r\nexport const CFooter = styled(Flex)`\r\n    width: 100%;\r\n    min-height: 20vh;\r\n    height: auto;\r\n    padding: 25px;\r\n`;\r\n\r\nconst TableDiv = styled(Flex)`\r\n    width: 100%;\r\n    max-width: 720px;\r\n`\r\n\r\nexport const TBHeader = styled(TableDiv)``;\r\nexport const TBBody = styled(TableDiv)`\r\n    margin-top: 10px;\r\n`;\r\n\r\nexport const TextDescription = styled(Text)`\r\n    margin: 10px 5px\r\n`\r\n","import { Flex, Button, Heading, Text } from '@sparkpointio/sparkswap-uikit';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { IPoolInformation, IProjects, ITokens } from 'config/constants/type';\r\nimport React, { useContext, useState, useCallback, useEffect } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { CustomThemeContext } from 'ThemeContext';\r\nimport useActiveWeb3React from \"hooks/useActiveWeb3React\";\r\nimport {useLaunchpadContract} from \"hooks/useContracts\";\r\nimport {calculateLaunchpadStats, getAccountDetailsLaunchPad} from \"utils/contractHelpers\";\r\nimport { TBHeader, TBBody } from './styled';\r\n\r\n\r\nconst Container = styled(Flex)`\r\n    margin: 10px;\r\n    width: 100%;\r\n    height: auto;\r\n`;\r\n\r\nconst NavOptions = styled(Button)<{ activeIndex: boolean }>`\r\n    background-color: transparent;\r\n    color: ${({ theme, activeIndex }) => (activeIndex ? theme.colors.text : theme.colors.textSubtle)};\r\n    border-bottom: ${({ theme, activeIndex }) => activeIndex && `3px solid ${theme.colors.primary}`};\r\n`;\r\n\r\ninterface Stats { \r\n    totalForSaleTokens: string;\r\n    totalSoldTokens: string;\r\n    remainingForSale: string;\r\n    totalSales: string;\r\n    expectedSales: string;\r\n    percentage: string;\r\n    tokenRate: string;\r\n    totalParticipants: string;\r\n}\r\n\r\ntype AppProps = {\r\n    pool: IPoolInformation;\r\n    project: IProjects;\r\n    buyingToken?: ITokens;\r\n}\r\n\r\nconst FooterNav = ({ activeIndex = 0, handleClick}: { activeIndex?: number; handleClick: (i:number) => void }) => {\r\n    const theme = useContext(ThemeContext);\r\n    const customTheme = useContext(CustomThemeContext);\r\n    return (\r\n        <Flex alignItems=\"center\" style={{ margin: '10px 10px 0px 10px', padding: '20px 20px 0px 20px' }}>\r\n            <NavOptions activeIndex={activeIndex === 0} onClick={() => handleClick(0)}>Project Details</NavOptions>\r\n            {/* <NavOptions activeIndex={activeIndex === 1} onClick={() => handleClick(1)}>Schedule</NavOptions>\r\n            <NavOptions activeIndex={activeIndex === 2} onClick={() => handleClick(2)}>Your Allocation</NavOptions> */}\r\n        </Flex>\r\n    );\r\n};\r\n\r\nconst AllocationSection = () => {\r\n    return (\r\n        <Flex margin=\"20px\" padding=\"20px\" flexDirection=\"column\">\r\n            <TBHeader justifyContent=\"space-between\" >\r\n                <Text bold>No.</Text>\r\n                <Text bold>Token Allocation</Text>\r\n                <Text bold>Date</Text>\r\n                <Text bold>Token(s) claimed</Text>\r\n                <Text bold>Action</Text>\r\n            </TBHeader>\r\n            <TBBody justifyContent=\"space-between\" >\r\n                <Text color=\"textSubtle\">001</Text>\r\n                <Text color=\"textSubtle\">159662.6 OWN</Text>\r\n                <Text color=\"textSubtle\">06/24/2021</Text>\r\n                <Text color=\"textSubtle\">OWNLY</Text>\r\n                <Text color=\"textSubtle\">SWAP</Text>\r\n            </TBBody>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nconst FooterDetails: React.FC<AppProps> = ({pool, project}) => {\r\n    const theme = useContext(ThemeContext);\r\n    const { account } = useWeb3React();\r\n    const customTheme = useContext(CustomThemeContext);\r\n    const [ activeIndex , setActive ] = useState<number>(0);\r\n    const { open, close, cap, totalUserParticipated, totalFundsSwapped } = pool;\r\n    const handleClick = useCallback((i) => {\r\n        setActive(i)\r\n    }, [])\r\n\r\n    const {library} = useActiveWeb3React();\r\n    const contract = useLaunchpadContract(project.category)\r\n    const [stats, setStats] = useState({\r\n        totalForSaleTokens: '-',\r\n        totalSoldTokens: '-',\r\n        remainingForSale: '-',\r\n        totalSales: '-',\r\n        expectedSales: '-',\r\n        percentage: '00.00',\r\n        tokenRate: '-',\r\n        totalParticipants: '-'\r\n    })\r\n\r\n    useEffect(() => {\r\n        calculateLaunchpadStats(contract, project).then(r => setStats(r));\r\n        // getAccountDetailsLaunchPad(contract, project, library, account).then(r => setAccountDetails(r)).catch(console.log)\r\n    }, [contract, project, account, library])\r\n    const totalSales = parseFloat(stats.totalSales).toFixed(4)\r\n    return (\r\n        <Container\r\n            style={{ backgroundColor: theme.isDark ? customTheme.customColors?.BG1 : customTheme.customColors?.BG2 }}\r\n            flexDirection=\"column\"\r\n        >\r\n            <div style={{ marginBottom: '10px', borderBottom: `1px solid ${theme.colors.primary}` }}>\r\n                <FooterNav handleClick={handleClick} activeIndex={activeIndex} />\r\n            </div>\r\n            { activeIndex === 0 && <Flex padding=\"20px\" margin=\"20px\" justifyContent=\"space-between\">\r\n                <Flex flex=\"1\" flexDirection=\"column\" marginRight=\"10px\">\r\n                    <Heading margin=\"10px 0px 30px 0\" bold>\r\n                        Pool Information\r\n                    </Heading>\r\n                    <Flex justifyContent=\"space-between\">\r\n                        <Text>Opens</Text>\r\n                        <Text color=\"textSubtle\">{open}</Text>\r\n                    </Flex>\r\n                    <Flex justifyContent=\"space-between\">\r\n                        <Text>Closes</Text>\r\n                        <Text color=\"textSubtle\">{close}</Text>\r\n                    </Flex>\r\n                    <Flex justifyContent=\"space-between\">\r\n                        <Text>Cap</Text>\r\n                        <Text color=\"textSubtle\">{stats.expectedSales} {project.buyingCoin.symbol}</Text>\r\n                    </Flex>\r\n                    <Flex justifyContent=\"space-between\">\r\n                        <Text>Total Users Participated</Text>\r\n                        <Text color=\"textSubtle\">{stats.totalParticipants}</Text>\r\n                    </Flex>\r\n                    <Flex justifyContent=\"space-between\">\r\n                        <Text>Total Funds Swapped</Text>\r\n                        <Text color=\"textSubtle\">{totalSales} {project.buyingCoin.symbol}</Text>\r\n                    </Flex>\r\n                </Flex>\r\n                <Flex flex=\"1\" marginLeft=\"10px\" flexDirection=\"column\">\r\n                    <Heading margin=\"10px 0px 30px 0px\" bold>\r\n                        Token Information\r\n                    </Heading>\r\n                    <Flex justifyContent=\"space-between\">\r\n                        <Text>Name</Text>\r\n                        <Text color=\"textSubtle\">{project.title}</Text>\r\n                    </Flex>\r\n                    <Flex justifyContent=\"space-between\">\r\n                        <Text>Token Symbol</Text>\r\n                        <Text color=\"textSubtle\">{project.symbol}</Text>\r\n                    </Flex>\r\n                    <Flex justifyContent=\"space-between\">\r\n                        <Text>Total Supply</Text>\r\n                        <Text color=\"textSubtle\">{project.ownSale.toLocaleString()}</Text>\r\n                    </Flex>\r\n                </Flex>\r\n            </Flex>\r\n            }\r\n            {\r\n                account && activeIndex === 2 && (\r\n                    <AllocationSection />\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default FooterDetails;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport {TokenAmount} from \"@sparkpointio/sparkswap-sdk\";\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { Globe, Twitter, Send } from 'react-feather';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n    Card,\r\n    Flex,\r\n    Heading,\r\n    Button,\r\n    CardBody,\r\n    CardHeader,\r\n    Text,\r\n    Progress,\r\n    CardFooter,\r\n    useModal,\r\n} from '@sparkpointio/sparkswap-uikit';\r\nimport { useAccountWhiteList, useFindProjectByAddress, useGetPoolsByAddress, useFindProject as getFindProject } from 'state/hooks';\r\nimport { IProjects, ITokens, STATE } from 'config/constants/type';\r\nimport SvgIcon from 'components/SvgIcon';\r\nimport UnlockButton from 'components/ConnectWalletButton';\r\nimport { StyledHr2 as Divider } from 'components/Divider';\r\nimport PurchaseModal from 'components/Modals/PurchaseModal';\r\nimport { CustomThemeContext } from 'ThemeContext';\r\nimport { SocmedGroup, ProgressGroup } from '../components/styled';\r\nimport { ReactComponent as MediumIcon } from '../components/icons/MediumIcon.svg';\r\nimport Anchor from '../components/StyledLink';\r\nimport FooterDetails from './FooterDetails';\r\nimport { CCont, CHeader, TokenImage, SmalltokenImage, CBody, StyledButton, CustomDataGroup, CFooter, TextDescription } from './styled'\r\nimport {calculateLaunchpadStats, getAccountDetailsLaunchPad} from \"../../../utils/contractHelpers\";\r\nimport {useLaunchpadContract} from \"../../../hooks/useContracts\";\r\nimport useActiveWeb3React from \"../../../hooks/useActiveWeb3React\";\r\nimport {BNB, OWN} from \"../../../config\";\r\n\r\n\r\n\r\n\r\ntype AppProps = {\r\n    project: IProjects\r\n}\r\ntype ActionProps = AppProps & {account?: string | null; whiteListed?: boolean}\r\n\r\nconst Allocations: React.FC<{tokenImage:string; symbol: string; allocation:string}> = ({tokenImage, symbol, allocation}) => {\r\n    const srcs = `${process.env.PUBLIC_URL}/images/icons/${tokenImage}`;\r\n    return (\r\n        <div style={{ marginTop: '20px' }}>\r\n            <Text>My Allocations</Text>\r\n            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                <SmalltokenImage src={srcs} alt=\"token-logo\" />\r\n                <Text bold>{allocation} {symbol}</Text>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ActionCard: React.FC<ActionProps> = ({ account, whiteListed, project}) => {\r\n    const theme = useContext(ThemeContext);\r\n    const customTheme = useContext(CustomThemeContext);\r\n    const Paddress = getFindProject()\r\n    const [stats, setStats] = useState({\r\n        totalForSaleTokens: '-',\r\n        totalSoldTokens: '-',\r\n        remainingForSale: '-',\r\n        totalSales: '-',\r\n        expectedSales: '-',\r\n        percentage: '00.00',\r\n        tokenRate: '-',\r\n        totalParticipants: '-'\r\n    })\r\n    const [accountDetails, setAccountDetails] = useState({\r\n        balance: new TokenAmount(project.buyingCoin, BigInt(0)),\r\n        amount: new TokenAmount(project.sellingCoin, BigInt(0)),\r\n        maxPayableAmount: new TokenAmount(project.sellingCoin, BigInt(0)),\r\n        maxExpendable: new TokenAmount(project.buyingCoin, BigInt(0)),\r\n        rewardedAmount: new TokenAmount(project.sellingCoin, BigInt(0)),\r\n        redeemed: false,\r\n        whitelist: false,\r\n    })\r\n    const {library} = useActiveWeb3React();\r\n\r\n    const contract = useLaunchpadContract(project.category)\r\n    \r\n    useEffect(() => {\r\n        calculateLaunchpadStats(contract, project).then(r => setStats(r));\r\n        getAccountDetailsLaunchPad(contract, project, library, account).then(r => setAccountDetails(r)).catch(console.log)\r\n    }, [contract, project, account, library])\r\n\r\n    const [ onPurchaseModal ] = useModal(<PurchaseModal address={Paddress} stats={stats} />)\r\n    const tokenReport = {\r\n        title: `${project.progress} ${project.symbol}`,\r\n    }\r\n    \r\n    const percentage = parseFloat(stats.percentage).toFixed(4)\r\n    const totalSoldTokens = parseFloat(stats.totalSoldTokens).toFixed(4)\r\n    const totalSales = parseFloat(stats.totalSales).toFixed(4)\r\n    const expectedSales = parseFloat(stats.expectedSales).toFixed(2)\r\n    return (\r\n        <CardBody\r\n            style={{\r\n                width: '100%',\r\n                backgroundColor: theme.isDark ? customTheme.customColors?.BG1 : customTheme.customColors?.BG2,\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'space-around',\r\n            }}\r\n        >\r\n            <ProgressGroup>\r\n                <Text bold as=\"h1\" fontSize=\"24px\">\r\n                    {totalSoldTokens} <span style={{color: theme.colors.textSubtle}}>{project.sellingCoin.name} Sold</span>\r\n                </Text>\r\n                <Progress primaryStep={parseFloat(percentage)} variant=\"flat\" />\r\n                <Flex justifyContent=\"space-between\">\r\n                    <Text color=\"textSubtle\">{percentage}%</Text>\r\n                    <Text color=\"textSubtle\">\r\n                        {totalSales} / {expectedSales} {project.buyingCoin.symbol}\r\n                    </Text>\r\n                </Flex>\r\n            </ProgressGroup>\r\n            <CustomDataGroup flexDirection=\"column\">\r\n                <Flex justifyContent=\"space-between\">\r\n                    <Text color=\"textSubtle\">OWNLY Price</Text>\r\n                    <Text>{stats.tokenRate} {project.buyingCoin.symbol}</Text>\r\n                </Flex>\r\n                <Flex justifyContent=\"space-between\">\r\n                    <Text color=\"textSubtle\">OWNLY Sold</Text>\r\n                    <Text>{stats.totalSoldTokens} {project.sellingCoin.symbol}</Text>\r\n                </Flex>\r\n                <Flex justifyContent=\"space-between\">\r\n                    <Text color=\"textSubtle\">Total Raised</Text>\r\n                    <Text>{stats.totalSales} {project.buyingCoin.symbol}</Text>\r\n                </Flex>\r\n                <Flex justifyContent=\"space-between\">\r\n                    <Text color=\"primary\">Your Max Allocation</Text>\r\n                    {/* <Text>{accountDetails.maxPayableAmount.toExact()} {project.sellingCoin.symbol}</Text> */}\r\n                    {!whiteListed ? (\r\n                        <Text>0 {project.sellingCoin.symbol}</Text>\r\n                    ) : (\r\n                        <Text>No Limit</Text>\r\n                    )}\r\n                </Flex>\r\n                <Flex justifyContent=\"space-between\">\r\n                    <Text color=\"primary\">Your Max BNB</Text>\r\n                    {/* <Text>{accountDetails.maxExpendable.toExact()} BNB</Text> */}\r\n                    {!whiteListed ? (\r\n                        <Text>0 BNB</Text>\r\n                    ) : (\r\n                        <Text>{accountDetails.balance.toExact()} BNB</Text>\r\n                    )}\r\n                </Flex>\r\n            </CustomDataGroup>\r\n            {!account ? (\r\n                <div style={{ marginTop: '15px', padding: '10px 0px' }}>\r\n                    <UnlockButton fullWidth />\r\n                </div>\r\n            ) : !whiteListed ? (\r\n                <Allocations tokenImage={project.image} symbol={project.symbol} allocation={accountDetails.rewardedAmount.toExact()}/>\r\n            ) : (\r\n                <>\r\n                <Allocations tokenImage={project.image} symbol={project.symbol} allocation={accountDetails.rewardedAmount.toExact()} />\r\n                <Button onClick={onPurchaseModal} fullWidth style={{marginTop: '10px'}} disabled={stats.remainingForSale === '-'}>Purchase {project.symbol}</Button>\r\n                </>\r\n            )}\r\n        </CardBody>\r\n    );\r\n};\r\n\r\n\r\nconst ProjectComponent: React.FC = () => {\r\n    const { account } = useWeb3React();\r\n    const [whiteListed, setWhiteList] = useState(false);\r\n    const Paddress = getFindProject();\r\n    const project = useFindProjectByAddress(Paddress);\r\n    const acc = useAccountWhiteList(account);\r\n    const pool = useGetPoolsByAddress(Paddress);\r\n    const { title, image, longDesc, longDesc2, longDesc3, buyingCoin, socMeds, wallpaperBg, status } = project;\r\n    const srcs = `${process.env.PUBLIC_URL}/images/icons/${image}`;\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (status !== STATE.active){\r\n            history.push('/projects');\r\n        }\r\n    }, [history, status])\r\n\r\n    useEffect(() => {\r\n        if (acc[0][0]) {\r\n            setWhiteList(true);\r\n        } else setWhiteList(false);\r\n    }, [acc]);\r\n\r\n    const theme = useContext(ThemeContext);\r\n    const srcsBg = `${process.env.PUBLIC_URL}/images/icons/${wallpaperBg}`;\r\n    return (\r\n        <CCont>\r\n            <CHeader src={srcsBg}>\r\n                <TokenImage src={srcs} alt=\"token-image\" />\r\n                <Heading bold fontSize=\"24px\">\r\n                    {title}\r\n                </Heading>\r\n            </CHeader>\r\n            <CBody>\r\n                <Flex justifyContent=\"space-between\">\r\n                    <Flex flex=\"1\" flexDirection=\"column\" padding=\"10px\">\r\n                        <Flex alignItems=\"center\" justifyContent=\"space-between\" marginTop=\"-20px\" marginBottom=\"10px\" padding=\"10px 0px\">\r\n                            <SocmedGroup>\r\n                                <Anchor href={socMeds?.[0]}>\r\n                                    <Globe />\r\n                                </Anchor>\r\n                                <Anchor href={socMeds?.[1]}>\r\n                                    <Twitter fill={theme.colors.text} />\r\n                                </Anchor>\r\n                                <Anchor href={socMeds?.[2]}>\r\n                                    <Send fill={theme.colors.text} />\r\n                                </Anchor>\r\n                                <Anchor href={socMeds?.[3]}>\r\n                                    <SvgIcon width={24} Icon={MediumIcon} />\r\n                                </Anchor>\r\n                            </SocmedGroup>\r\n                            {status === STATE.active ? (\r\n                                <StyledButton style={{ backgroundColor: '#32a31b' }}>LIVE NOW</StyledButton>\r\n                            ) : status === STATE.upcoming ? (\r\n                                <StyledButton style={{ backgroundColor: '#7a1ba3' }}>UPCOMING</StyledButton>\r\n                            ) : (\r\n                                <StyledButton style={{ backgroundColor: '#8e98a5' }}>COMPLETED</StyledButton>\r\n                            )}\r\n                        </Flex>\r\n                        <Flex flexDirection=\"column\" justifyContent=\"space-between\">\r\n                        <TextDescription color=\"textSubtle\" as=\"p\">\r\n                            {longDesc}\r\n                        </TextDescription>\r\n                        <TextDescription color=\"textSubtle\" as=\"p\">\r\n                            {longDesc2}\r\n                        </TextDescription>\r\n                        <TextDescription color=\"textSubtle\" as=\"p\">\r\n                            {longDesc3}\r\n                        </TextDescription>\r\n                        </Flex>\r\n                    </Flex>\r\n                    <Flex flex=\"1\">\r\n                        <ActionCard\r\n                        account={account}\r\n                        whiteListed={whiteListed}\r\n                        project={project}\r\n                        \r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            </CBody>\r\n            <CFooter>\r\n                <FooterDetails pool={pool} project={project} />\r\n            </CFooter>\r\n        </CCont>\r\n    );\r\n};\r\n\r\nexport default ProjectComponent;\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport { RouteComponentProps, Link } from 'react-router-dom';\r\nimport { ArrowRight, ChevronLeft } from 'react-feather';\r\nimport { Heading, Flex, Text, Breadcrumbs, Button } from '@sparkpointio/sparkswap-uikit'\r\nimport { useAppSelector, useFindProject as findProject, useFindProjectByAddress as findProjectByAddress, useSetProject as setProject } from 'state/hooks'\r\nimport styled from 'styled-components';\r\nimport Page from 'components/layout/Page';\r\nimport ProjectComponent from './ProjectComponent';\r\n\r\nconst Container = styled(Flex)`\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px;\r\n    max-width: 1200px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`\r\nconst BackButton = styled(Link)`\r\n    display: flex;\r\n    align-items: center;\r\n    color: ${({theme}) => theme.colors.text};\r\n`\r\n\r\nconst Layout: React.FC <RouteComponentProps<{ProjectAddress?: string}>> = ({ match: {params: { ProjectAddress }}})  => {\r\n    const data = setProject(ProjectAddress)\r\n    const project = useAppSelector((state) => state.projects.data.find(p => p.address === data));\r\n\r\n\r\n    return (\r\n        <Page>\r\n            <Container>\r\n                <Flex style={{width: '100%', minHeight: '10vh'}} flexDirection=\"column\"  justifyContent=\"space-between\" marginTop=\"20px\" padding=\"5px 0px\">\r\n                <Heading fontSize=\"24px\" bold> SparkLaunch </Heading>\r\n                {/* <Flex justifyContent=\"flex-end\" style={{width: '100%'}}></Flex> */}\r\n                <Flex justifyContent=\"space-between\" marginBottom=\"3px\">\r\n                <Breadcrumbs>\r\n                    <Text>SparkLaunch</Text>\r\n                    <Text>On Going</Text>\r\n                    <Text>{project?.symbol}</Text>\r\n                </Breadcrumbs>\r\n                    <BackButton to='/projects'><ChevronLeft /> PROJECTS </BackButton>\r\n                </Flex>\r\n\r\n                </Flex>\r\n                <ProjectComponent />\r\n            </Container>\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default Layout;\r\n"],"sourceRoot":""}